<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="https://onthefritzz.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://onthefritzz.com/" rel="alternate" type="text/html" /><updated>2024-01-15T08:07:32-06:00</updated><id>https://onthefritzz.com/feed.xml</id><title type="html">Uneducated Technology</title><subtitle>Follow a meandering career in tech...</subtitle><author><name>{&quot;name&quot;=&gt;nil, &quot;picture&quot;=&gt;nil, &quot;email&quot;=&gt;nil, &quot;twitter&quot;=&gt;nil, &quot;links&quot;=&gt;[{&quot;title&quot;=&gt;nil, &quot;url&quot;=&gt;nil, &quot;icon&quot;=&gt;nil}]}</name></author><entry><title type="html">Jellyfin Subtitle Extractor</title><link href="https://onthefritzz.com/jellyfin-subs/" rel="alternate" type="text/html" title="Jellyfin Subtitle Extractor" /><published>2024-01-13T00:00:00-06:00</published><updated>2024-01-13T00:00:00-06:00</updated><id>https://onthefritzz.com/jellyfin-subs</id><content type="html" xml:base="https://onthefritzz.com/jellyfin-subs/"><![CDATA[<ul>
  <li>Backup original file/folders containing subtitles</li>
  <li>Recursively search folders with random filenames for subtitle files</li>
  <li>Create a 2D array containing original filenames and file locations</li>
  <li>Create a 2D array from destination folders and standardized filenames of .SRTs</li>
  <li>Create directories with correct names for each subtitle file</li>
  <li>Rename and move original subtitle files to final folder destination</li>
</ul>

<p>Getting subtitles for Jellyfin isn’t a straight forward task. <a href="https://github.com/josdion/subbuzz">Subbuzz</a> plugin seems to be the easiest and quickest method for downloading subtitles in bulk but the settings have to be just right. There is <a href="https://www.bazarr.media/">Bazarr</a> but the installation/overhead is high. In either case, once you get em, you wanna keep em. Unfortunately, this is where they’re stored.</p>

<p><img src="/images/subtitle-tree.png" alt="image-center" /></p>

<p>Subtitles (at least via the Subbuzz method) are stored in the <code class="language-plaintext highlighter-rouge">/var/lib/jellyfin/metadata/library</code> directory but with a random alphanumeric file name structure. Luckily the .srt files are saved similarly to the original video filename they’re associated with. This makes them easier to sort. Here’s the end result.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">os</span><span class="p">,</span> <span class="n">shutil</span>
<span class="n">folderFileSrt</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">targetDestination</span> <span class="o">=</span> <span class="p">[]</span>

<span class="k">for</span> <span class="n">root</span><span class="p">,</span> <span class="n">dirs</span><span class="p">,</span> <span class="n">files</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="n">walk</span><span class="p">(</span><span class="s">'./'</span><span class="p">):</span>
    <span class="k">for</span> <span class="nb">file</span> <span class="ow">in</span> <span class="n">files</span><span class="p">:</span>
        <span class="k">if</span> <span class="s">'.srt'</span> <span class="ow">in</span> <span class="nb">file</span><span class="p">:</span>
            <span class="n">folderFile</span> <span class="o">=</span> <span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">root</span><span class="si">}</span><span class="s">\{file}'</span>
            <span class="n">folderFileSrt</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">folderFile</span><span class="p">)</span> <span class="c1"># Store array of [/folder1/file1.srt, folder2/file2.srt]
</span>
<span class="k">for</span> <span class="n">subtitle</span> <span class="ow">in</span> <span class="n">folderFileSrt</span><span class="p">:</span> <span class="c1"># For each found subtitle file...
</span>    <span class="n">outputFile</span> <span class="o">=</span> <span class="n">subtitle</span><span class="p">.</span><span class="n">replace</span><span class="p">(</span><span class="s">'.eng.srt'</span><span class="p">,</span> <span class="s">'.srt'</span><span class="p">)</span> <span class="c1"># remove cruff
</span>    <span class="n">outputFile</span> <span class="o">=</span> <span class="n">outputFile</span><span class="p">.</span><span class="n">replace</span><span class="p">(</span><span class="s">'.en.srt'</span><span class="p">,</span> <span class="s">'.srt'</span><span class="p">)</span> <span class="c1"># remove more cruff
</span>    <span class="n">outputFile</span> <span class="o">=</span> <span class="n">outputFile</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">'</span><span class="se">\\</span><span class="s">'</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="c1"># Get filename
</span>    <span class="n">outputFolder</span> <span class="o">=</span> <span class="n">outputFile</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">'.srt'</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> <span class="c1"># Get Folder name
</span>    <span class="n">fullOutput</span> <span class="o">=</span> <span class="sa">f</span><span class="s">'\{outputFolder}\{outputFile}'</span>
    <span class="n">targetDestination</span><span class="p">.</span><span class="n">append</span><span class="p">([</span><span class="n">subtitle</span><span class="p">,</span> <span class="n">fullOutput</span><span class="p">])</span> <span class="c1"># Create array with corrected subtitle filename and new output path
</span>
<span class="k">for</span> <span class="n">each</span> <span class="ow">in</span> <span class="n">targetDestination</span><span class="p">:</span> <span class="c1"># For each srt file
</span>    <span class="n">target</span><span class="p">,</span> <span class="n">destination</span> <span class="o">=</span> <span class="n">each</span>
    <span class="n">finalFileName</span> <span class="o">=</span> <span class="n">destination</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">'</span><span class="se">\\</span><span class="s">'</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="c1"># get raw filename
</span>
    <span class="n">destinationFolder</span> <span class="o">=</span> <span class="n">destination</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">'.srt'</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
    <span class="n">destinationFolder</span> <span class="o">=</span> <span class="n">destinationFolder</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">'</span><span class="se">\\</span><span class="s">'</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span> <span class="c1"># get raw folder name
</span>    <span class="n">destinationFolder</span> <span class="o">=</span> <span class="sa">f</span><span class="s">'./output/</span><span class="si">{</span><span class="n">destinationFolder</span><span class="si">}</span><span class="s">'</span> <span class="c1"># Create final destination folder
</span>
    <span class="n">os</span><span class="p">.</span><span class="n">mkdir</span><span class="p">(</span><span class="n">destinationFolder</span><span class="p">)</span> <span class="c1"># Create folder directory named after destination folders
</span>    <span class="n">shutil</span><span class="p">.</span><span class="n">move</span><span class="p">(</span><span class="n">target</span><span class="p">,</span> <span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">destinationFolder</span><span class="si">}</span><span class="s">/</span><span class="si">{</span><span class="n">finalFileName</span><span class="si">}</span><span class="s">'</span><span class="p">)</span> <span class="c1"># Move original filename to new location, as final filename
</span>
</code></pre></div></div>]]></content><author><name>{&quot;name&quot;=&gt;nil, &quot;picture&quot;=&gt;nil, &quot;email&quot;=&gt;nil, &quot;twitter&quot;=&gt;nil, &quot;links&quot;=&gt;[{&quot;title&quot;=&gt;nil, &quot;url&quot;=&gt;nil, &quot;icon&quot;=&gt;nil}]}</name></author><category term="Subtitles" /><category term="JellyFin" /><summary type="html"><![CDATA[Backup original file/folders containing subtitles Recursively search folders with random filenames for subtitle files Create a 2D array containing original filenames and file locations Create a 2D array from destination folders and standardized filenames of .SRTs Create directories with correct names for each subtitle file Rename and move original subtitle files to final folder destination]]></summary></entry><entry><title type="html">NAS? NAH.</title><link href="https://onthefritzz.com/nas-nah/" rel="alternate" type="text/html" title="NAS? NAH." /><published>2024-01-04T00:00:00-06:00</published><updated>2024-01-04T00:00:00-06:00</updated><id>https://onthefritzz.com/nas-nah</id><content type="html" xml:base="https://onthefritzz.com/nas-nah/"><![CDATA[<p><img src="/images/newnasnaw.jpg" alt="no-alignment" /></p>

<p>Todays the day for upgrades. Been rocking a <a href="https://www.friendlyelec.com/index.php?route=product/product&amp;product_id=222">NanoPiNeo w/ NAS Hat</a> for many years. Pretty sure the all in cost was around $30. (See Left) It has been home to more than 3 drive upgrades. Countless SD card swaps. It has ran Jellyfin, Plex, PiHole, a CUPs server which took an unsorted grocery list, sorted it by aisle and printed the result to a thermal printer. See <a href="https://www.onthefritzz.com/googleNotesToThermal/">here</a>. However it’s become obsolete. My homelab now requires 1 gigabit speeds and this little guy tops out at 100mbps. Sufficient for a great many things but not all. Goodbye little fellow.</p>

<p>Hellow NUC. Rescued the little guy on the right awhile back. It’s an Intel NUC model NUC6i5SYH. It supports two drives over the Neo’s one, but most importantly supports gigabit. Perfect. Booted it up. Ran <code class="language-plaintext highlighter-rouge">curl https://repo.jellyfin.org/install-debuntu.sh | sudo bash</code> to install JellyFin and the rest is history.</p>

<p>Additionally, I disposed of any CAT 5 cable in sight. Upgraded from an Asus RT-AC1200 (10/100mbps) to an Asus RT-AX55 AX1800 (1Gb). There will be no noticeable difference to the speeds from our ISP since the older router supported our habits. However the new AX55 will be a welcomed upgrade when transferring data locally.</p>

<p>Lastly, my EDC Knife broke today. See <a href="https://www.onthefritzz.com/new-edc/">here</a>. That was about 2 years old. Used it every day and it never lost it’s edge. I immediately went out, purchased a new one. Which included a new inflation price. Swapped the belt clip and we are better than new.</p>

<p>New year, new… Nah!</p>]]></content><author><name>{&quot;name&quot;=&gt;nil, &quot;picture&quot;=&gt;nil, &quot;email&quot;=&gt;nil, &quot;twitter&quot;=&gt;nil, &quot;links&quot;=&gt;[{&quot;title&quot;=&gt;nil, &quot;url&quot;=&gt;nil, &quot;icon&quot;=&gt;nil}]}</name></author><category term="NAS" /><category term="JellyFin" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Bulk Convert PDFs into Optimized JPGs</title><link href="https://onthefritzz.com/bulk-convert-pdfs/" rel="alternate" type="text/html" title="Bulk Convert PDFs into Optimized JPGs" /><published>2023-09-25T00:00:00-05:00</published><updated>2023-09-25T00:00:00-05:00</updated><id>https://onthefritzz.com/bulk-convert-pdfs</id><content type="html" xml:base="https://onthefritzz.com/bulk-convert-pdfs/"><![CDATA[<ul>
  <li>Create a copy of database to test on</li>
  <li>Delete all files unrelated to task to avoid confusion</li>
  <li>Reduce file size of output jpgs
    <ul>
      <li>Remove extraneous images <em>inside</em> PDFs</li>
    </ul>
  </li>
  <li>Convert PDFs to JPGs
    <ul>
      <li>Each PDF page corresponds to 1x JPG</li>
      <li>Resulting in multiple JPGs per pdf</li>
      <li>Dynamically reduce/stitch all JPGS into one long JPG</li>
    </ul>
  </li>
  <li>Optimize final, stitched JPG to a degree that balances quality with filesize</li>
</ul>

<p>Been away for a while cuz I’ve been in learning mode. Been taking Udemy courses regarding App development with Ionic Capacitor amongst unrelated things. That is to say that a recent issue developed involving embedding PDFs into an Ionic app using React. Many attempts were made using a ton of libraries, external tools, etc… and while the Web App worked fine, the android version of the App would never display the PDFs. It would display jpgs just fine though. Time to convert 1000s of PDFs into JPGs.
<br />
<br />
However, it turns out that a 1:1 PDF:JPG is significantly larger in size. That is; 3GB as opposed to 349MB. A 3GB app is out of the question. The script below takes thousands of PDFs and outputs an optimized JPG for each. It could use some refactoring but it’s also a one off script so that’s never gunna happen. It just needs to work. End result is a collective filesize coming in at 228MB. Which comes out to a 34% reduction in size for the app. The fact that the it all became smaller is a nice surprise.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">pdf2image</span> <span class="kn">import</span> <span class="n">convert_from_path</span>
<span class="kn">from</span> <span class="nn">PIL</span> <span class="kn">import</span> <span class="n">Image</span>
<span class="kn">import</span> <span class="nn">fitz</span><span class="p">,</span> <span class="n">cv2</span><span class="p">,</span> <span class="n">os</span><span class="p">,</span> <span class="n">re</span>

<span class="n">__rootDir</span> <span class="o">=</span> <span class="s">'.</span><span class="se">\\</span><span class="s">recipes'</span>
<span class="n">__ppi</span> <span class="o">=</span> <span class="mi">400</span>
<span class="n">__optimizeQualality</span> <span class="o">=</span> <span class="mi">50</span>

<span class="k">def</span> <span class="nf">deleteAll</span><span class="p">(</span><span class="n">fileFormat</span><span class="p">):</span> <span class="c1">#Delete Main image JPGs to avoid confusion with Stitched JPGs. ie: Run once.
</span>    <span class="k">for</span> <span class="n">root</span><span class="p">,</span> <span class="n">dirs</span><span class="p">,</span> <span class="n">files</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="n">walk</span><span class="p">(</span><span class="n">__rootDir</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">oneFile</span> <span class="ow">in</span> <span class="n">files</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">fileFormat</span> <span class="ow">in</span> <span class="n">oneFile</span><span class="p">:</span>
                <span class="k">print</span><span class="p">(</span><span class="s">'Deleting... '</span><span class="p">,</span> <span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">root</span><span class="si">}</span><span class="s">\{oneFile}'</span><span class="p">)</span>
                <span class="n">os</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">root</span><span class="si">}</span><span class="s">\{oneFile}'</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">removeImageFromPDFs</span><span class="p">():</span> <span class="c1"># Remove images from pdfs
</span>    <span class="k">def</span> <span class="nf">remove_images</span><span class="p">(</span><span class="n">input_pdf</span><span class="p">,</span> <span class="n">output_pdf</span><span class="p">):</span>
        <span class="n">doc</span> <span class="o">=</span> <span class="n">fitz</span><span class="p">.</span><span class="nb">open</span><span class="p">(</span><span class="n">input_pdf</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">page</span> <span class="ow">in</span> <span class="n">doc</span><span class="p">:</span>
            <span class="n">img_list</span> <span class="o">=</span> <span class="n">page</span><span class="p">.</span><span class="n">get_images</span><span class="p">()</span>
            <span class="k">for</span> <span class="n">img</span> <span class="ow">in</span> <span class="n">img_list</span><span class="p">:</span>
                <span class="n">page</span><span class="p">.</span><span class="n">delete_image</span><span class="p">(</span><span class="n">img</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>

        <span class="n">doc</span><span class="p">.</span><span class="n">save</span><span class="p">(</span><span class="n">output_pdf</span><span class="p">)</span>

    <span class="k">for</span> <span class="n">root</span><span class="p">,</span> <span class="n">dirs</span><span class="p">,</span> <span class="n">files</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="n">walk</span><span class="p">(</span><span class="n">__rootDir</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">pdf</span> <span class="ow">in</span> <span class="n">files</span><span class="p">:</span>
            <span class="k">if</span> <span class="s">'.pdf'</span> <span class="ow">in</span> <span class="n">pdf</span><span class="p">:</span>
                <span class="n">fileName</span> <span class="o">=</span> <span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">root</span><span class="si">}</span><span class="s">\{pdf}'</span>
                <span class="n">outputFileName</span> <span class="o">=</span> <span class="n">fileName</span><span class="p">.</span><span class="n">replace</span><span class="p">(</span><span class="s">'.pdf'</span><span class="p">,</span> <span class="s">'-noimage.pdf'</span><span class="p">)</span>
                <span class="k">print</span><span class="p">(</span><span class="s">'Removing images from pdf...'</span><span class="p">,</span> <span class="n">fileName</span><span class="p">)</span>
                <span class="n">remove_images</span><span class="p">(</span><span class="n">fileName</span><span class="p">,</span> <span class="n">outputFileName</span><span class="p">)</span>
                <span class="n">os</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="n">fileName</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">convertPDFsIntoJPGs</span><span class="p">():</span>
    <span class="k">for</span> <span class="n">root</span><span class="p">,</span> <span class="n">dirs</span><span class="p">,</span> <span class="n">files</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="n">walk</span><span class="p">(</span><span class="n">__rootDir</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">pics</span> <span class="ow">in</span> <span class="n">files</span><span class="p">:</span>
            <span class="k">if</span> <span class="s">'.pdf'</span> <span class="ow">in</span> <span class="n">pics</span><span class="p">:</span>
                <span class="n">jpgName</span> <span class="o">=</span> <span class="n">pics</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">'</span><span class="se">\\</span><span class="s">'</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="n">replace</span><span class="p">(</span><span class="s">'.pdf'</span><span class="p">,</span> <span class="s">''</span><span class="p">)</span>
                <span class="n">jpgName</span> <span class="o">=</span> <span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">jpgName</span><span class="si">}</span><span class="s">-stitched'</span>

                <span class="n">pages</span> <span class="o">=</span> <span class="n">convert_from_path</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">root</span><span class="si">}</span><span class="s">\{pics}'</span><span class="p">,</span> <span class="n">__ppi</span><span class="p">)</span>
                <span class="k">for</span> <span class="n">count</span><span class="p">,</span> <span class="n">page</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">pages</span><span class="p">):</span>
                    <span class="n">page</span><span class="p">.</span><span class="n">save</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">root</span><span class="si">}</span><span class="s">\{jpgName}-</span><span class="si">{</span><span class="n">count</span><span class="si">}</span><span class="s">.jpg'</span><span class="p">,</span> <span class="s">'JPEG'</span><span class="p">)</span>
                    <span class="k">print</span><span class="p">(</span><span class="s">'Converting PDF into JPG...'</span><span class="p">,</span> <span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">root</span><span class="si">}</span><span class="s">\{jpgName}-</span><span class="si">{</span><span class="n">count</span><span class="si">}</span><span class="s">.jpg'</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">verticallyStitchJPGs</span><span class="p">():</span>
    <span class="k">for</span> <span class="n">root</span><span class="p">,</span> <span class="n">dirs</span><span class="p">,</span> <span class="n">files</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="n">walk</span><span class="p">(</span><span class="n">__rootDir</span><span class="p">):</span>
        <span class="n">imgReads</span> <span class="o">=</span> <span class="p">{</span><span class="s">"filePath"</span><span class="p">:</span> <span class="s">''</span><span class="p">,</span> <span class="s">"jpgFiles"</span><span class="p">:</span> <span class="p">[],</span> <span class="s">"deleteImgs"</span><span class="p">:</span> <span class="p">[]}</span>
        
        <span class="k">for</span> <span class="n">pics</span> <span class="ow">in</span> <span class="n">files</span><span class="p">:</span>
            <span class="n">inputFilePath</span> <span class="o">=</span> <span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">root</span><span class="si">}</span><span class="s">\{pics}'</span>
            <span class="n">outputFilePath</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="n">sub</span><span class="p">(</span><span class="s">'-\d'</span><span class="p">,</span> <span class="s">''</span><span class="p">,</span> <span class="n">inputFilePath</span><span class="p">).</span><span class="n">replace</span><span class="p">(</span><span class="s">'.jpg'</span><span class="p">,</span> <span class="s">'-final.jpg'</span><span class="p">)</span>
            <span class="n">imgReads</span><span class="p">[</span><span class="s">"filePath"</span><span class="p">]</span> <span class="o">=</span> <span class="n">outputFilePath</span>
            <span class="n">imgToMemory</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">imread</span><span class="p">(</span><span class="n">inputFilePath</span><span class="p">)</span>
            <span class="n">imgReads</span><span class="p">[</span><span class="s">"deleteImgs"</span><span class="p">].</span><span class="n">append</span><span class="p">(</span><span class="n">inputFilePath</span><span class="p">)</span>
            <span class="n">imgReads</span><span class="p">[</span><span class="s">"jpgFiles"</span><span class="p">].</span><span class="n">append</span><span class="p">(</span><span class="n">imgToMemory</span><span class="p">)</span>

        <span class="k">print</span><span class="p">(</span><span class="n">imgReads</span><span class="p">[</span><span class="s">"filePath"</span><span class="p">],</span> <span class="nb">len</span><span class="p">(</span><span class="n">imgReads</span><span class="p">[</span><span class="s">'jpgFiles'</span><span class="p">]))</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">imgReads</span><span class="p">[</span><span class="s">"jpgFiles"</span><span class="p">])</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">concatImage</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">vconcat</span><span class="p">(</span><span class="n">imgReads</span><span class="p">[</span><span class="s">"jpgFiles"</span><span class="p">])</span>
            <span class="n">cv2</span><span class="p">.</span><span class="n">imwrite</span><span class="p">(</span><span class="n">imgReads</span><span class="p">[</span><span class="s">"filePath"</span><span class="p">],</span> <span class="n">concatImage</span><span class="p">)</span>

        <span class="k">for</span> <span class="n">nonStitchedPics</span> <span class="ow">in</span> <span class="n">imgReads</span><span class="p">[</span><span class="s">"deleteImgs"</span><span class="p">]:</span>
            <span class="n">os</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="n">nonStitchedPics</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">finalOptimizedJPG</span><span class="p">():</span>
    <span class="k">for</span> <span class="n">root</span><span class="p">,</span> <span class="n">dirs</span><span class="p">,</span> <span class="n">files</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="n">walk</span><span class="p">(</span><span class="n">__rootDir</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">pic</span> <span class="ow">in</span> <span class="n">files</span><span class="p">:</span>
            <span class="n">inputFile</span> <span class="o">=</span> <span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">root</span><span class="si">}</span><span class="s">\{pic}'</span>
            <span class="n">imgInMemory</span> <span class="o">=</span> <span class="n">Image</span><span class="p">.</span><span class="nb">open</span><span class="p">(</span><span class="n">inputFile</span><span class="p">)</span>
            <span class="n">outputFile</span> <span class="o">=</span> <span class="n">inputFile</span><span class="p">.</span><span class="n">replace</span><span class="p">(</span><span class="s">'-final.jpg'</span><span class="p">,</span> <span class="s">'-final-optimized.jpg'</span><span class="p">)</span>
            <span class="n">imgInMemory</span><span class="p">.</span><span class="n">save</span><span class="p">(</span><span class="n">outputFile</span><span class="p">,</span> <span class="n">optimize</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">quality</span><span class="o">=</span><span class="n">__optimizeQualality</span><span class="p">)</span>
            <span class="k">print</span><span class="p">(</span><span class="s">'Optimizing final JPG... '</span><span class="p">,</span> <span class="n">outputFile</span><span class="p">,</span> <span class="s">'Deleting: '</span><span class="p">,</span> <span class="n">inputFile</span><span class="p">)</span>
            <span class="n">os</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="n">inputFile</span><span class="p">)</span>

<span class="n">deleteAll</span><span class="p">(</span><span class="s">'.json'</span><span class="p">)</span>
<span class="n">deleteAll</span><span class="p">(</span><span class="s">'.jpg'</span><span class="p">)</span>
<span class="n">removeImageFromPDFs</span><span class="p">()</span>
<span class="n">convertPDFsIntoJPGs</span><span class="p">()</span>
<span class="n">deleteAll</span><span class="p">(</span><span class="s">'.pdf'</span><span class="p">)</span>
<span class="n">verticallyStitchJPGs</span><span class="p">()</span>
<span class="n">finalOptimizedJPG</span><span class="p">()</span>
</code></pre></div></div>]]></content><author><name>{&quot;name&quot;=&gt;nil, &quot;picture&quot;=&gt;nil, &quot;email&quot;=&gt;nil, &quot;twitter&quot;=&gt;nil, &quot;links&quot;=&gt;[{&quot;title&quot;=&gt;nil, &quot;url&quot;=&gt;nil, &quot;icon&quot;=&gt;nil}]}</name></author><category term="Python" /><summary type="html"><![CDATA[Create a copy of database to test on Delete all files unrelated to task to avoid confusion Reduce file size of output jpgs Remove extraneous images inside PDFs Convert PDFs to JPGs Each PDF page corresponds to 1x JPG Resulting in multiple JPGs per pdf Dynamically reduce/stitch all JPGS into one long JPG Optimize final, stitched JPG to a degree that balances quality with filesize]]></summary></entry><entry><title type="html">Zzz….</title><link href="https://onthefritzz.com/sleeper/" rel="alternate" type="text/html" title="Zzz…." /><published>2023-08-04T00:00:00-05:00</published><updated>2023-08-04T00:00:00-05:00</updated><id>https://onthefritzz.com/sleeper</id><content type="html" xml:base="https://onthefritzz.com/sleeper/"><![CDATA[<table>
  <thead>
    <tr>
      <th>Part</th>
      <th>Model</th>
      <th>Cost</th>
      <th>Value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>CPU</td>
      <td>Ryzen 5 1400</td>
      <td>$0.00</td>
      <td>$110.00</td>
    </tr>
    <tr>
      <td>GPU</td>
      <td>RTX 3060</td>
      <td>$0.00</td>
      <td>$299.99</td>
    </tr>
    <tr>
      <td>MOBO</td>
      <td>MSI Bazook B350M</td>
      <td>$0.00</td>
      <td>$149.99</td>
    </tr>
    <tr>
      <td>RAM</td>
      <td>32GB DDR4</td>
      <td>$0.00</td>
      <td>$59.99</td>
    </tr>
    <tr>
      <td>1TB NVMe SSD</td>
      <td>-</td>
      <td>$0.00</td>
      <td>$39.99</td>
    </tr>
    <tr>
      <td>8TB HDDs (4x2TB)*</td>
      <td>WD20EZAZ</td>
      <td>$0.00</td>
      <td>$224.99</td>
    </tr>
    <tr>
      <td>Case</td>
      <td>-</td>
      <td>$0.00</td>
      <td>$89.99</td>
    </tr>
    <tr>
      <td>5.25in to 3.5in HDD Adapter (x4)</td>
      <td>-</td>
      <td>$27.16</td>
      <td>$27.16</td>
    </tr>
    <tr>
      <td>RGB 92mm Fans (x2)</td>
      <td>-</td>
      <td>$25.90</td>
      <td>$25.90</td>
    </tr>
    <tr>
      <td>Thermal Paste</td>
      <td>-</td>
      <td>$8.97</td>
      <td>$8.97</td>
    </tr>
    <tr>
      <td>Rubber Mouting Screws (x12)</td>
      <td>-</td>
      <td>$5.89</td>
      <td>$5.89</td>
    </tr>
    <tr>
      <td>Total</td>
      <td>-</td>
      <td>$67.92</td>
      <td>$1042.86</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>The HDDs are ~1 year old and from an older RAID project. The RAID is now incorporated into the desktop so their cost isn’t considered as part of the build. Not to mentioned, they could have been free if required.</li>
</ul>

<p>Cheapest custom build ever? Prolly not, but it’s quite a steal. Never judge a book by it’s cover.
Special appreciation to B.L.D.Z.R.</p>

<p><img src="/images/sleeper-off.jpg" class="align-center" alt="" />
<br />
<img src="/images/sleeper-on.jpg" class="align-center" alt="" /></p>]]></content><author><name>{&quot;name&quot;=&gt;nil, &quot;picture&quot;=&gt;nil, &quot;email&quot;=&gt;nil, &quot;twitter&quot;=&gt;nil, &quot;links&quot;=&gt;[{&quot;title&quot;=&gt;nil, &quot;url&quot;=&gt;nil, &quot;icon&quot;=&gt;nil}]}</name></author><category term="Sleeper" /><summary type="html"><![CDATA[Part Model Cost Value CPU Ryzen 5 1400 $0.00 $110.00 GPU RTX 3060 $0.00 $299.99 MOBO MSI Bazook B350M $0.00 $149.99 RAM 32GB DDR4 $0.00 $59.99 1TB NVMe SSD - $0.00 $39.99 8TB HDDs (4x2TB)* WD20EZAZ $0.00 $224.99 Case - $0.00 $89.99 5.25in to 3.5in HDD Adapter (x4) - $27.16 $27.16 RGB 92mm Fans (x2) - $25.90 $25.90 Thermal Paste - $8.97 $8.97 Rubber Mouting Screws (x12) - $5.89 $5.89 Total - $67.92 $1042.86]]></summary></entry><entry><title type="html">Sticky situation</title><link href="https://onthefritzz.com/sticky-controller/" rel="alternate" type="text/html" title="Sticky situation" /><published>2023-04-30T00:00:00-05:00</published><updated>2023-04-30T00:00:00-05:00</updated><id>https://onthefritzz.com/sticky-controller</id><content type="html" xml:base="https://onthefritzz.com/sticky-controller/"><![CDATA[<p><img src="/images/xbox-one-exploded-controller.jpg" class="align-center" alt="" />
<br />
Pretty straight forward. Someone got the ‘B’ button sticky. Take apart, clean with isopropol alcohol. Put back together. Done.
<br />
<br />
Interesting note is that the ‘B’ button is actually more accessible than the other 3 action buttons. ‘B’ is accessible after dissassembling the main housing components, whereas the other 3 buttons require internal components/boards to be removed from each other.</p>]]></content><author><name>{&quot;name&quot;=&gt;nil, &quot;picture&quot;=&gt;nil, &quot;email&quot;=&gt;nil, &quot;twitter&quot;=&gt;nil, &quot;links&quot;=&gt;[{&quot;title&quot;=&gt;nil, &quot;url&quot;=&gt;nil, &quot;icon&quot;=&gt;nil}]}</name></author><category term="Xbox" /><category term="Hardware" /><summary type="html"><![CDATA[Pretty straight forward. Someone got the ‘B’ button sticky. Take apart, clean with isopropol alcohol. Put back together. Done. Interesting note is that the ‘B’ button is actually more accessible than the other 3 action buttons. ‘B’ is accessible after dissassembling the main housing components, whereas the other 3 buttons require internal components/boards to be removed from each other.]]></summary></entry><entry><title type="html">Reducing Xbox One S Load Times</title><link href="https://onthefritzz.com/xbox-ssd-upgrade/" rel="alternate" type="text/html" title="Reducing Xbox One S Load Times" /><published>2023-04-15T00:00:00-05:00</published><updated>2023-04-15T00:00:00-05:00</updated><id>https://onthefritzz.com/xbox-ssd-upgrade</id><content type="html" xml:base="https://onthefritzz.com/xbox-ssd-upgrade/"><![CDATA[<p><img src="/images/xbox-one-s.jpg" class="align-center" alt="" /></p>

<table>
  <thead>
    <tr>
      <th>Process</th>
      <th>HDD (sec)</th>
      <th>SSD (sec)</th>
      <th>Net (sec)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Boot To Home - #1</td>
      <td>54.68</td>
      <td>54.35</td>
      <td><strike>-0.33</strike></td>
    </tr>
    <tr>
      <td>Boot To Home - #2</td>
      <td>58.79</td>
      <td>54.12</td>
      <td><strike>-4.67</strike></td>
    </tr>
    <tr>
      <td>Home To Spyro Start Page - #1</td>
      <td>73.18</td>
      <td>56.27</td>
      <td>-16.91</td>
    </tr>
    <tr>
      <td>Home To Spyro Start Page - #2</td>
      <td>77.19</td>
      <td>47.09</td>
      <td>-30.10</td>
    </tr>
    <tr>
      <td>Spyro Start To Gameplay - #1</td>
      <td>38.82</td>
      <td>30.13</td>
      <td>-8.69</td>
    </tr>
    <tr>
      <td>Spyro Start To Gameplay - #2</td>
      <td>38.90</td>
      <td>22.04</td>
      <td>-16.86</td>
    </tr>
    <tr>
      <td>Home To Dredge Start Page - #1</td>
      <td>76.67</td>
      <td>34.88</td>
      <td>-41.79</td>
    </tr>
  </tbody>
</table>

<p>Noticed that when getting a gameover in some games the reloading or ‘continue’ process takes just an extra tick longer than expected. If this happens a couple times in a row, the load time is just insult to injury. So it’s time for an SSD.</p>

<p>The old 500GB platter drive was cloned with Clonezilla using the ‘expert’ default prompts with -k1 flag. This expanded the imaged partitions to make better use of the slightly bigger, 512GB SSD.</p>

<p><img src="/images/xbox-one-s-clonezilla.jpg" class="align-center" alt="" /></p>

<p>Then we put it back together.</p>

<p><img src="/images/xbox-one-s-done.jpg" class="align-center" alt="" /></p>

<p>Cloning was an excellent solution as I’ve reached the maximum number of account/console transfers allowed with GamePass. This way all games, accounts, passwords, etc… remain intact and I don’t have to fuss with the paid GamePass subscription becoming unusable.</p>

<p>All in all:</p>
<ul>
  <li>Average savings is 22 seconds per action</li>
  <li>~45 seconds saved per game</li>
  <li>Load times after a gameover feel much more transitory</li>
  <li>Over 18 emails and passwords required absolutey <strong>zero</strong> setup</li>
  <li>The ‘Boot To Home’ times are not included because there really wasn’t a noticeable difference
    <ul>
      <li>Indicating everything leading up to the home page on power up is BIOS/ROM/Embedded and unrelated to storage load times.</li>
    </ul>
  </li>
</ul>]]></content><author><name>{&quot;name&quot;=&gt;nil, &quot;picture&quot;=&gt;nil, &quot;email&quot;=&gt;nil, &quot;twitter&quot;=&gt;nil, &quot;links&quot;=&gt;[{&quot;title&quot;=&gt;nil, &quot;url&quot;=&gt;nil, &quot;icon&quot;=&gt;nil}]}</name></author><category term="Xbox" /><category term="Hardware" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Webscraping Healthy Recipes</title><link href="https://onthefritzz.com/webscraping-healthy-recipes/" rel="alternate" type="text/html" title="Webscraping Healthy Recipes" /><published>2023-03-29T00:00:00-05:00</published><updated>2023-03-29T00:00:00-05:00</updated><id>https://onthefritzz.com/webscraping-healthy-recipes</id><content type="html" xml:base="https://onthefritzz.com/webscraping-healthy-recipes/"><![CDATA[<ul>
  <li>Another recipe scraper!</li>
  <li>Killed ~5103 ads</li>
  <li>Added 500+ recipes to my collection</li>
  <li>Same format as usual for scraping recipes
    <ul>
      <li>Get links corresponding to each food category</li>
      <li>Get total amount of pages for each category</li>
      <li>Get header, picture, pdf, etc.. of each recipes occuring on each page</li>
    </ul>
  </li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">scrapy</span><span class="p">,</span> <span class="n">logging</span><span class="p">,</span> <span class="n">time</span><span class="p">,</span> <span class="n">json</span><span class="p">,</span> <span class="n">re</span><span class="p">,</span> <span class="n">os</span>
<span class="kn">import</span> <span class="nn">requests</span><span class="p">,</span> <span class="n">pdfkit</span><span class="p">,</span> <span class="n">unidecode</span>
<span class="kn">from</span> <span class="nn">scrapy.crawler</span> <span class="kn">import</span> <span class="n">CrawlerProcess</span>
<span class="kn">from</span> <span class="nn">scrapy</span> <span class="kn">import</span> <span class="n">Selector</span>
<span class="kn">from</span> <span class="nn">pprint</span> <span class="kn">import</span> <span class="n">pprint</span>

<span class="k">class</span> <span class="nc">sallySpider</span><span class="p">(</span><span class="n">scrapy</span><span class="p">.</span><span class="n">Spider</span><span class="p">):</span>
  <span class="s">"""Collect food recipes without the abhorrently excessive ads and life stories
  Will crawl any site that is formatted as follows (with minor tweaking).
  Category drop down/url suffixs. Grab all links for every page in pagination footer. Get header, picture and card (to pdf) download."""</span>
  <span class="n">name</span> <span class="o">=</span> <span class="s">'healthy-nommer'</span>
  <span class="n">outputFolder</span> <span class="o">=</span> <span class="s">'healthy-database'</span>
  <span class="n">start_urls</span> <span class="o">=</span> <span class="p">[</span><span class="s">'https://healthyrecipesblogs.com'</span><span class="p">]</span>
  <span class="n">logging</span><span class="p">.</span><span class="n">getLogger</span><span class="p">(</span><span class="s">'scrapy'</span><span class="p">).</span><span class="n">propagate</span> <span class="o">=</span> <span class="bp">False</span> <span class="c1"># No Excessive Log
</span>  <span class="n">custom_settings</span> <span class="o">=</span> <span class="p">{</span><span class="s">'LOG_LEVEL'</span><span class="p">:</span> <span class="s">'ERROR'</span><span class="p">}</span>
  <span class="n">convertPdfPath</span> <span class="o">=</span> <span class="sa">r</span><span class="s">'C:\Program Files\wkhtmltopdf\bin\wkhtmltopdf.exe'</span> <span class="c1"># force path for html to pdf bin
</span>  <span class="n">config</span> <span class="o">=</span> <span class="n">pdfkit</span><span class="p">.</span><span class="n">configuration</span><span class="p">(</span><span class="n">wkhtmltopdf</span><span class="o">=</span><span class="n">convertPdfPath</span><span class="p">)</span>
  <span class="n">articlesGrabbed</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="n">articleOn</span> <span class="o">=</span> <span class="mi">0</span>

  <span class="k">def</span> <span class="nf">start_requests</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span> <span class="c1"># Scrape several food category urls
</span>    <span class="n">urlSuffix</span> <span class="o">=</span> <span class="p">[</span><span class="s">'meat-recipes'</span><span class="p">,</span> <span class="s">'chicken-recipes'</span><span class="p">,</span> <span class="s">'seafood-recipes'</span><span class="p">,</span> <span class="s">'casserole-recipes'</span><span class="p">,</span>
          <span class="s">'vegetable-recipes'</span><span class="p">,</span> <span class="s">'side-dishes'</span><span class="p">,</span> <span class="s">'dips-dressings-sauces'</span><span class="p">,</span> <span class="s">'healthy-appetizers'</span><span class="p">,</span>
          <span class="s">'healthy-snack-recipes'</span><span class="p">,</span> <span class="s">'healthy-pizza-recipes'</span><span class="p">,</span> <span class="s">'soup-recipes'</span><span class="p">,</span>
          <span class="s">'healthy-breakfast-recipes'</span><span class="p">,</span> <span class="s">'healthy-desserts'</span><span class="p">,</span> <span class="s">'gluten-free-bread-recipes'</span><span class="p">]</span> <span class="c1"># 'meat-recipes'
</span>
    <span class="n">urls</span> <span class="o">=</span> <span class="p">[</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">start_urls</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="si">}</span><span class="s">/category/</span><span class="si">{</span><span class="n">x</span><span class="si">}</span><span class="s">'</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">urlSuffix</span><span class="p">]</span> <span class="c1"># List of full URLs, domain + category
</span>    <span class="k">for</span> <span class="n">url</span> <span class="ow">in</span> <span class="n">urls</span><span class="p">:</span> <span class="c1"># For each url/category, run pagination function
</span>      <span class="n">category</span> <span class="o">=</span> <span class="n">url</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">'/'</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
      <span class="k">yield</span> <span class="n">scrapy</span><span class="p">.</span><span class="n">Request</span><span class="p">(</span><span class="n">url</span><span class="o">=</span><span class="n">url</span><span class="p">,</span> <span class="n">callback</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">getAllCategoryPages</span><span class="p">,</span> <span class="n">cb_kwargs</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">category</span><span class="o">=</span><span class="n">category</span><span class="p">))</span> <span class="c1"># Carry category as function
</span>  
  <span class="k">def</span> <span class="nf">getAllCategoryPages</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">response</span><span class="p">,</span> <span class="n">category</span><span class="p">):</span> <span class="c1"># Get highest 'page number' from bottom of category page
</span>    <span class="n">categoryUrls</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">page</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">):</span> <span class="c1"># Al dente code. There is no category that has more than 3 pages. There is no go to 'last' page button
</span>      <span class="k">if</span> <span class="n">page</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span> <span class="c1"># If first page, use 0 page instead of 1, which doesn't work
</span>        <span class="n">categoryUrls</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">response</span><span class="p">.</span><span class="n">url</span><span class="si">}</span><span class="s">page/0'</span><span class="p">)</span>
      <span class="k">else</span><span class="p">:</span>
        <span class="n">categoryUrls</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">response</span><span class="p">.</span><span class="n">url</span><span class="si">}</span><span class="s">page/</span><span class="si">{</span><span class="n">page</span><span class="si">}</span><span class="s">'</span><span class="p">)</span>

    <span class="k">for</span> <span class="n">url</span> <span class="ow">in</span> <span class="n">categoryUrls</span><span class="p">:</span>
      <span class="k">yield</span> <span class="n">scrapy</span><span class="p">.</span><span class="n">Request</span><span class="p">(</span><span class="n">url</span><span class="o">=</span><span class="n">url</span><span class="p">,</span> <span class="n">callback</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">parse</span><span class="p">,</span> <span class="n">cb_kwargs</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">category</span><span class="o">=</span><span class="n">category</span><span class="p">))</span>
  
  <span class="k">def</span> <span class="nf">parse</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">response</span><span class="p">,</span> <span class="n">category</span><span class="p">):</span>
    <span class="n">recipes</span> <span class="o">=</span> <span class="n">response</span><span class="p">.</span><span class="n">xpath</span><span class="p">(</span><span class="s">'//div[@class="feast-category-index  feast-recipe-index"]'</span><span class="p">).</span><span class="n">getall</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span> <span class="c1"># Only get main category recipes, not side bar recommendations [1]
</span>    <span class="n">recipeHtmlString</span> <span class="o">=</span> <span class="n">Selector</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">recipes</span><span class="p">)</span> <span class="c1"># Convert .getall() string back into parseable xpath
</span>    <span class="n">recipeUrls</span> <span class="o">=</span> <span class="n">recipeHtmlString</span><span class="p">.</span><span class="n">xpath</span><span class="p">(</span><span class="s">'//li[@class="listing-item"]/a/@href'</span><span class="p">).</span><span class="n">getall</span><span class="p">()</span>
    
    <span class="k">for</span> <span class="n">url</span> <span class="ow">in</span> <span class="n">recipeUrls</span><span class="p">:</span>
      <span class="bp">self</span><span class="p">.</span><span class="n">articlesGrabbed</span> <span class="o">+=</span> <span class="mi">1</span>
      <span class="k">yield</span> <span class="n">scrapy</span><span class="p">.</span><span class="n">Request</span><span class="p">(</span><span class="n">url</span><span class="o">=</span><span class="n">url</span><span class="p">,</span> <span class="n">callback</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">recursiveParse</span><span class="p">,</span> <span class="n">cb_kwargs</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">category</span><span class="o">=</span><span class="n">category</span><span class="p">))</span>

  <span class="k">def</span> <span class="nf">recursiveParse</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">response</span><span class="p">,</span> <span class="n">category</span><span class="p">):</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">articleOn</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="n">name</span> <span class="o">=</span> <span class="n">response</span><span class="p">.</span><span class="n">xpath</span><span class="p">(</span><span class="s">'//h1[@class="entry-title"]/text()'</span><span class="p">).</span><span class="n">get</span><span class="p">()</span>
    <span class="n">name</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="n">sub</span><span class="p">(</span><span class="sa">r</span><span class="s">'[^a-zA-Z0-9\s]+'</span><span class="p">,</span> <span class="s">''</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>
    <span class="n">name</span> <span class="o">=</span> <span class="n">name</span><span class="p">.</span><span class="n">replace</span><span class="p">(</span><span class="s">'  '</span><span class="p">,</span> <span class="s">' '</span><span class="p">)</span>
    
    <span class="n">mainImage</span> <span class="o">=</span> <span class="n">response</span><span class="p">.</span><span class="n">xpath</span><span class="p">(</span><span class="s">'//figure/img/@src'</span><span class="p">).</span><span class="n">get</span><span class="p">()</span>
    <span class="n">recipeCardUrl</span> <span class="o">=</span> <span class="n">response</span><span class="p">.</span><span class="n">xpath</span><span class="p">(</span><span class="s">'//div[@class="wprm-container-float-right"]/a/@href'</span><span class="p">).</span><span class="n">getall</span><span class="p">()[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="c1"># If recipe card doesn't exist, scrapy errors but moves on. Page likely cooking tip, utensil/accessory desccription
</span>    <span class="n">recipeID</span> <span class="o">=</span> <span class="n">recipeCardUrl</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">'/'</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>

    <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">'Article: </span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">articleOn</span><span class="si">}</span><span class="s">/</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">articlesGrabbed</span><span class="si">}</span><span class="s">, </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s">, </span><span class="si">{</span><span class="n">category</span><span class="si">}</span><span class="s">, </span><span class="si">{</span><span class="n">response</span><span class="p">.</span><span class="n">url</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">"/"</span><span class="p">)[</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span><span class="si">}</span><span class="s">'</span><span class="p">)</span>

    <span class="n">recipeJson</span> <span class="o">=</span> <span class="p">{</span>
      <span class="s">'url'</span><span class="p">:</span> <span class="n">response</span><span class="p">.</span><span class="n">url</span><span class="p">,</span>
      <span class="s">'name'</span><span class="p">:</span> <span class="n">name</span><span class="p">,</span>
      <span class="s">'image'</span><span class="p">:</span> <span class="n">mainImage</span><span class="p">,</span>
      <span class="s">'id'</span><span class="p">:</span> <span class="n">recipeID</span><span class="p">,</span>
      <span class="s">'category'</span><span class="p">:</span> <span class="n">category</span><span class="p">,</span>
      <span class="s">'card'</span><span class="p">:</span> <span class="n">recipeCardUrl</span>
    <span class="p">}</span>
    
    <span class="n">filename</span> <span class="o">=</span> <span class="n">name</span><span class="p">.</span><span class="n">replace</span><span class="p">(</span><span class="s">" "</span><span class="p">,</span> <span class="s">"-"</span><span class="p">).</span><span class="n">lower</span><span class="p">()</span> <span class="c1"># Format header into lowercase, dash seperated for file naming
</span>    <span class="n">nestedFolder</span> <span class="o">=</span> <span class="sa">f</span><span class="s">'.</span><span class="se">\\</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">outputFolder</span><span class="si">}</span><span class="se">\\</span><span class="si">{</span><span class="n">category</span><span class="si">}</span><span class="se">\\</span><span class="si">{</span><span class="n">filename</span><span class="si">}</span><span class="se">\\</span><span class="s">'</span> <span class="c1"># Nest a folder named 'Recipe' within folder name of 'Category'
</span>    
    <span class="k">try</span><span class="p">:</span>
      <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">exists</span><span class="p">(</span><span class="n">nestedFolder</span><span class="p">):</span> <span class="c1"># If \Category\Recipe folder doesn't exist...
</span>        <span class="n">os</span><span class="p">.</span><span class="n">makedirs</span><span class="p">(</span><span class="n">nestedFolder</span><span class="p">)</span> <span class="c1"># make it
</span>        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">nestedFolder</span><span class="si">}{</span><span class="n">filename</span><span class="si">}</span><span class="s">.json'</span><span class="p">,</span> <span class="s">'w'</span><span class="p">)</span> <span class="k">as</span> <span class="n">j</span><span class="p">:</span> <span class="c1"># Create json log file of scraped info
</span>          <span class="n">json</span><span class="p">.</span><span class="n">dump</span><span class="p">(</span><span class="n">recipeJson</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span>

        <span class="n">rawImg</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">mainImage</span><span class="p">).</span><span class="n">content</span> <span class="c1"># Dirty get/dl img jpg without using builtin scrapy pipelines...
</span>        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">nestedFolder</span><span class="si">}{</span><span class="n">filename</span><span class="si">}</span><span class="s">.jpg'</span><span class="p">,</span> <span class="s">'wb'</span><span class="p">)</span> <span class="k">as</span> <span class="n">i</span><span class="p">:</span> 
          <span class="n">i</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">rawImg</span><span class="p">)</span> <span class="c1"># ..this nix's excessive scrapy files and reqs only one scipt
</span>        <span class="c1">#Especially since using htmltopdf to avoid [intentionally] atrocious html code inside main recipe table 
</span>        <span class="n">pdfkit</span><span class="p">.</span><span class="n">from_url</span><span class="p">(</span><span class="n">recipeCardUrl</span><span class="p">,</span> <span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">nestedFolder</span><span class="si">}{</span><span class="n">filename</span><span class="si">}</span><span class="s">.pdf'</span><span class="p">,</span> <span class="n">configuration</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">config</span><span class="p">)</span>
    <span class="k">except</span><span class="p">:</span>
      <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="sa">f</span><span class="s">'.</span><span class="se">\\</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">outputFolder</span><span class="si">}</span><span class="se">\\</span><span class="s">errors.txt'</span><span class="p">,</span> <span class="s">'w+'</span><span class="p">)</span> <span class="k">as</span> <span class="n">w</span><span class="p">:</span>
        <span class="n">w</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s">, </span><span class="si">{</span><span class="n">mainImage</span><span class="si">}</span><span class="s">, </span><span class="si">{</span><span class="n">category</span><span class="si">}</span><span class="s">, </span><span class="si">{</span><span class="n">recipeCardUrl</span><span class="si">}</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
  
    <span class="n">time</span><span class="p">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
  <span class="n">process</span> <span class="o">=</span> <span class="n">CrawlerProcess</span><span class="p">()</span>
  <span class="n">process</span><span class="p">.</span><span class="n">crawl</span><span class="p">(</span><span class="n">sallySpider</span><span class="p">)</span>
  <span class="n">process</span><span class="p">.</span><span class="n">start</span><span class="p">()</span>
</code></pre></div></div>]]></content><author><name>{&quot;name&quot;=&gt;nil, &quot;picture&quot;=&gt;nil, &quot;email&quot;=&gt;nil, &quot;twitter&quot;=&gt;nil, &quot;links&quot;=&gt;[{&quot;title&quot;=&gt;nil, &quot;url&quot;=&gt;nil, &quot;icon&quot;=&gt;nil}]}</name></author><category term="Webscraping" /><category term="Python" /><category term="Scrapy" /><summary type="html"><![CDATA[Another recipe scraper! Killed ~5103 ads Added 500+ recipes to my collection Same format as usual for scraping recipes Get links corresponding to each food category Get total amount of pages for each category Get header, picture, pdf, etc.. of each recipes occuring on each page]]></summary></entry><entry><title type="html">Dummies for a dummy.</title><link href="https://onthefritzz.com/dummys/" rel="alternate" type="text/html" title="Dummies for a dummy." /><published>2023-03-18T00:00:00-05:00</published><updated>2023-03-18T00:00:00-05:00</updated><id>https://onthefritzz.com/dummys</id><content type="html" xml:base="https://onthefritzz.com/dummys/"><![CDATA[<p><img src="/images/vga-dummy-exploded.jpg" class="align-center" alt="" /></p>

<p>Overview: HP’s are trash imo. HP’s excel at being ever so slightly annoying, even when nothing is wrong and <strong>especially</strong> when something needs to be fixed. Nothing ever seems to go ‘smoothly’ in a repair and they always have weird quirks. Not enough to convince people not to purchase them but more than enough for an experienced tech to know what to expect when HP’s are involved.</p>

<p>Issue: HP boots to BIOS fine but has no video output if a display is not connected <strong>prior</strong> to powering on.</p>

<p>Why: HP’s seem to be the only Desktop brand that has models where the display driver isn’t loaded with BIOS, unless it physically detects a connected monitor. This is an issue when I can boot/test 10+ Dells at once and simply connect a display adapter one at a time to perform tasks in BIOS. However, when I perform the same task on some HP models, the unit clearly fires up and boots. Although if there was not a monitor plugged in prior to the unit power on, there is no visual. In essence HP’s can either reduce testing efficiency by 90% or we can create some VGA dummies. This is done by pulling select pins to ground with a resitor, a monitor is connected through simulation. Plug in or remove monitors to your hearts content without losing visuals. Here’s a diagram of what worked. Any <strong>50-150ohm</strong> resistor will work.</p>

<p><img src="/images/vga-dummy-schematic.jpg" class="align-center" alt="" /></p>

<p>(Source: https://www.geeks3d.com/20091230/vga-hack-how-to-make-a-vga-dummy-plug/)</p>

<p>Pay attention to the numbered pinout <strong>not</strong> the shape. The diagram above is for a <strong>female</strong> vga. I required the <strong>male</strong> connection which more or less inverted the diagram. Pro tip: Most, if not all, VGA cords actually have tiny numbers inside the shielding which correspond correctly to the numbers in the diagram. So to reiterate, base soldering on the numbers not the shape.</p>

<p><img src="/images/vga-ducks-in-a-row.jpg" class="align-center" alt="" /></p>]]></content><author><name>{&quot;name&quot;=&gt;nil, &quot;picture&quot;=&gt;nil, &quot;email&quot;=&gt;nil, &quot;twitter&quot;=&gt;nil, &quot;links&quot;=&gt;[{&quot;title&quot;=&gt;nil, &quot;url&quot;=&gt;nil, &quot;icon&quot;=&gt;nil}]}</name></author><category term="Hardware" /><category term="Soldering" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Meme Scraper + Randomizer</title><link href="https://onthefritzz.com/memer/" rel="alternate" type="text/html" title="Meme Scraper + Randomizer" /><published>2023-02-11T00:00:00-06:00</published><updated>2023-02-11T00:00:00-06:00</updated><id>https://onthefritzz.com/memer</id><content type="html" xml:base="https://onthefritzz.com/memer/"><![CDATA[<h3 id="memerpy">Memer.py</h3>
<ul>
  <li>Scrape frontpage memes from Ebaumsworld.com</li>
  <li>Polite scraping sleep timer</li>
  <li>Scrape unique meme article number
    <ul>
      <li>Save <code class="language-plaintext highlighter-rouge">article-number.json</code> to folder of the same number</li>
      <li>This json contains article-number, image url and image title</li>
    </ul>
  </li>
  <li>Output <code class="language-plaintext highlighter-rouge">README.md</code> with titles, images, <code class="language-plaintext highlighter-rouge">Back</code>, <code class="language-plaintext highlighter-rouge">Go To Top</code> and <code class="language-plaintext highlighter-rouge">Source</code> buttons</li>
</ul>

<h3 id="getrandommemespy">getRandomMemes.py</h3>
<ul>
  <li>Generate random collection of memes after folders and json files have been created
    <ul>
      <li>Save article number to <code class="language-plaintext highlighter-rouge">memer-config.json</code></li>
    </ul>
  </li>
  <li>Always have the freshest memes and do not reuse article number if in <code class="language-plaintext highlighter-rouge">memer-config.json</code>.
    <ul>
      <li>ie: Never see the same article twice!</li>
    </ul>
  </li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Memer.py
</span><span class="kn">import</span> <span class="nn">scrapy</span><span class="p">,</span> <span class="n">logging</span><span class="p">,</span> <span class="n">datetime</span><span class="p">,</span> <span class="n">time</span><span class="p">,</span> <span class="n">json</span><span class="p">,</span> <span class="n">os</span>
<span class="kn">from</span> <span class="nn">scrapy.crawler</span> <span class="kn">import</span> <span class="n">CrawlerProcess</span>
<span class="kn">from</span> <span class="nn">git</span> <span class="kn">import</span> <span class="n">Repo</span>

<span class="n">now</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">.</span><span class="n">datetime</span><span class="p">.</span><span class="n">now</span><span class="p">().</span><span class="n">strftime</span><span class="p">(</span><span class="s">"%m/%d/%Y-%H:%M:%S"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">baumerSpider</span><span class="p">(</span><span class="n">scrapy</span><span class="p">.</span><span class="n">Spider</span><span class="p">):</span>
  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">start_urls</span> <span class="o">=</span> <span class="p">[</span><span class="s">'https://www.ebaumsworld.com'</span><span class="p">]</span>
    <span class="n">logging</span><span class="p">.</span><span class="n">getLogger</span><span class="p">(</span><span class="s">'scrapy'</span><span class="p">).</span><span class="n">propagate</span> <span class="o">=</span> <span class="bp">False</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">header</span> <span class="o">=</span> <span class="sa">f</span><span class="s">'# All ur Memes R belog to Uz&lt;br&gt;</span><span class="se">\n</span><span class="s">Last updated: </span><span class="si">{</span><span class="n">now</span><span class="si">}</span><span class="se">\n</span><span class="s">&lt;br&gt;</span><span class="se">\n</span><span class="s">All credits to ebaumsworld.com'</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">urlPageStart</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">urlPageEnd</span> <span class="o">=</span> <span class="mi">6</span> <span class="c1"># Get memes from page 1 through this number
</span>    <span class="bp">self</span><span class="p">.</span><span class="n">articleCounter</span> <span class="o">=</span> <span class="mi">0</span> <span class="c1"># Counter designation for each article/meme dump
</span>    <span class="bp">self</span><span class="p">.</span><span class="n">sleepBetweenArticles</span> <span class="o">=</span> <span class="mi">30</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">outputHtml</span> <span class="o">=</span> <span class="s">'FRONTPAGES-README.MD'</span><span class="c1">#f'Article {self.urlPageStart}-{self.urlPageEnd}.md'
</span>
    <span class="k">try</span><span class="p">:</span>
      <span class="n">os</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">outputHtml</span><span class="p">)</span>
    
    <span class="k">except</span><span class="p">:</span>
      <span class="k">pass</span>
    
    <span class="k">finally</span><span class="p">:</span>
      <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">outputHtml</span><span class="p">,</span> <span class="s">'a+'</span><span class="p">)</span> <span class="k">as</span> <span class="n">w</span><span class="p">:</span> 
        <span class="n">w</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">header</span><span class="p">)</span>

  <span class="k">def</span> <span class="nf">sleeper</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">seconds</span><span class="p">,</span> <span class="n">note</span><span class="o">=</span><span class="s">''</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">sec</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">seconds</span><span class="p">):</span>
      <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">'Sleeping </span><span class="si">{</span><span class="n">sec</span><span class="si">}</span><span class="s">/</span><span class="si">{</span><span class="n">seconds</span><span class="si">}</span><span class="s"> (sec/s)...'</span><span class="p">,</span> <span class="n">flush</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s">'</span><span class="se">\r</span><span class="s">'</span><span class="p">)</span>
      <span class="n">time</span><span class="p">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
  
  <span class="k">def</span> <span class="nf">jMaker</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">j</span><span class="p">):</span>
    <span class="n">jFileName</span> <span class="o">=</span> <span class="n">j</span><span class="p">[</span><span class="s">'article-number'</span><span class="p">]</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">exists</span><span class="p">(</span><span class="n">jFileName</span><span class="p">):</span>
      <span class="n">os</span><span class="p">.</span><span class="n">makedirs</span><span class="p">(</span><span class="n">jFileName</span><span class="p">)</span>

    <span class="n">fileOut</span> <span class="o">=</span> <span class="sa">f</span><span class="s">'./</span><span class="si">{</span><span class="n">jFileName</span><span class="si">}</span><span class="s">/</span><span class="si">{</span><span class="n">jFileName</span><span class="si">}</span><span class="s">.json'</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">fileOut</span><span class="p">,</span> <span class="s">"w"</span><span class="p">)</span> <span class="k">as</span> <span class="n">wf</span><span class="p">:</span>
      <span class="n">json</span><span class="p">.</span><span class="n">dump</span><span class="p">(</span><span class="n">j</span><span class="p">,</span> <span class="n">wf</span><span class="p">)</span>

  <span class="k">def</span> <span class="nf">parse</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">response</span><span class="p">):</span> <span class="c1"># Get all front page article in start urls
</span>    <span class="n">urlSuffix</span> <span class="o">=</span> <span class="s">'/?page='</span> <span class="c1"># Page url suffix
</span>    <span class="k">for</span> <span class="n">page</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">urlPageStart</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">urlPageEnd</span><span class="p">):</span>
      <span class="n">pageUrl</span> <span class="o">=</span> <span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">start_urls</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="si">}{</span><span class="n">urlSuffix</span><span class="si">}{</span><span class="n">page</span><span class="si">}</span><span class="s">'</span>
      <span class="k">print</span><span class="p">(</span><span class="n">pageUrl</span><span class="p">)</span>
      <span class="k">yield</span> <span class="n">scrapy</span><span class="p">.</span><span class="n">Request</span><span class="p">(</span><span class="n">pageUrl</span><span class="p">,</span> <span class="n">callback</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">recursiveParse</span><span class="p">)</span> <span class="c1"># Recursively parse each page
</span>
  <span class="k">def</span> <span class="nf">recursiveParse</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">response</span><span class="p">):</span> <span class="c1"># Get links for any list item in 'Featured' front page
</span>    <span class="k">for</span> <span class="n">url</span> <span class="ow">in</span> <span class="n">response</span><span class="p">.</span><span class="n">xpath</span><span class="p">(</span><span class="s">'//div[@class="featureFeedDetails"]//a/@href'</span><span class="p">).</span><span class="n">getall</span><span class="p">():</span>
      <span class="k">if</span> <span class="n">url</span><span class="p">.</span><span class="n">startswith</span><span class="p">(</span><span class="s">'https://gaming.ebaumsworld.com'</span><span class="p">):</span> <span class="c1"># Exclude gaming articles which are categorized under 'pictures'
</span>        <span class="k">pass</span>

      <span class="k">elif</span> <span class="s">'pictures'</span> <span class="ow">in</span> <span class="n">url</span><span class="p">:</span>
        <span class="k">yield</span> <span class="n">scrapy</span><span class="p">.</span><span class="n">Request</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">start_urls</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="si">}{</span><span class="n">url</span><span class="si">}</span><span class="s">'</span><span class="p">,</span> <span class="n">callback</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">getMemes</span><span class="p">)</span>

  <span class="k">def</span> <span class="nf">getMemes</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">response</span><span class="p">):</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">articleCounter</span> <span class="o">+=</span> <span class="mi">1</span> <span class="c1"># Crawling a successful link, up article counter.
</span>    <span class="n">headerXpath</span> <span class="o">=</span> <span class="s">'//*[@id="detailPage"]/header/h1/text()'</span> <span class="c1"># Xpath for article header
</span>    <span class="n">memeXpath</span> <span class="o">=</span> <span class="s">'//img[@class="galleryListImage"]/@src'</span> <span class="c1"># Xpath for meme images
</span>    <span class="n">titleXpath</span> <span class="o">=</span> <span class="s">'//li[@class="galleryListItem"]/text()'</span> <span class="c1"># Xpath for meme titles
</span>    
    <span class="n">articleHeader</span> <span class="o">=</span> <span class="n">response</span><span class="p">.</span><span class="n">xpath</span><span class="p">(</span><span class="n">headerXpath</span><span class="p">).</span><span class="n">get</span><span class="p">()</span>
    <span class="n">memes</span> <span class="o">=</span> <span class="p">[</span><span class="n">meme</span><span class="p">.</span><span class="n">get</span><span class="p">()</span> <span class="k">for</span> <span class="n">meme</span> <span class="ow">in</span> <span class="n">response</span><span class="p">.</span><span class="n">xpath</span><span class="p">(</span><span class="n">memeXpath</span><span class="p">)]</span>
    <span class="n">titles</span> <span class="o">=</span> <span class="p">[]</span>
    
    <span class="k">for</span> <span class="n">title</span> <span class="ow">in</span> <span class="n">response</span><span class="p">.</span><span class="n">xpath</span><span class="p">(</span><span class="n">titleXpath</span><span class="p">):</span> <span class="c1"># Get each title text
</span>      <span class="n">title</span> <span class="o">=</span> <span class="n">title</span><span class="p">.</span><span class="n">get</span><span class="p">().</span><span class="n">strip</span><span class="p">()</span>
      <span class="k">if</span> <span class="n">title</span> <span class="o">!=</span> <span class="s">''</span><span class="p">:</span> <span class="c1"># Discard extraneous empty values that get scraped
</span>        <span class="n">titles</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">title</span><span class="p">)</span>
    
    <span class="n">memeBlock</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="n">titles</span><span class="p">,</span> <span class="n">memes</span><span class="p">))</span> <span class="c1"># Generate 2D array and associate meme images with title
</span>
    <span class="n">nextNumber</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">articleCounter</span> <span class="o">+</span> <span class="mi">1</span> <span class="c1"># Markdown link to next article/meme collection
</span>    <span class="n">previousNumber</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">articleCounter</span> <span class="o">-</span> <span class="mi">1</span>
    <span class="n">html</span> <span class="o">=</span> <span class="sa">f</span><span class="s">'## &lt;a href="#linky</span><span class="si">{</span><span class="n">nextNumber</span><span class="si">}</span><span class="s">" id="linky</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">articleCounter</span><span class="si">}</span><span class="s">"&gt;</span><span class="si">{</span><span class="n">articleHeader</span><span class="si">}</span><span class="s">&lt;/a&gt;&lt;br&gt;</span><span class="se">\n\n</span><span class="s">'</span>

    <span class="k">for</span> <span class="n">title</span><span class="p">,</span> <span class="n">meme</span> <span class="ow">in</span> <span class="n">memeBlock</span><span class="p">:</span>
      <span class="n">html</span> <span class="o">+=</span> <span class="sa">f</span><span class="s">'&lt;span style="font-size:4em"&gt;</span><span class="si">{</span><span class="n">title</span><span class="si">}</span><span class="s">&lt;/span&gt;&lt;br&gt;&lt;img src="</span><span class="si">{</span><span class="n">meme</span><span class="si">}</span><span class="s">" style="width:100%"&gt;&lt;br&gt;</span><span class="se">\n\n</span><span class="s">'</span>
    <span class="n">html</span> <span class="o">+=</span> <span class="sa">f</span><span class="s">'&lt;a href="#linky</span><span class="si">{</span><span class="n">previousNumber</span><span class="si">}</span><span class="s">"&gt;GO TO PREVIOUS&lt;/a&gt;</span><span class="se">\n\n</span><span class="s">'</span>  
    <span class="n">html</span> <span class="o">+=</span> <span class="sa">f</span><span class="s">'&lt;a href="</span><span class="si">{</span><span class="n">response</span><span class="p">.</span><span class="n">url</span><span class="si">}</span><span class="s">"&gt;Source URL &lt;b&gt;with&lt;/b&gt; Ads&lt;/a&gt;</span><span class="se">\n\n</span><span class="s">'</span>
    <span class="n">html</span> <span class="o">+=</span> <span class="s">'&lt;a href="#linky1"&gt;GO TO TOP&lt;/a&gt;</span><span class="se">\n</span><span class="s">'</span>

    <span class="n">j</span> <span class="o">=</span> <span class="p">{</span>
      <span class="s">'article-number'</span><span class="p">:</span> <span class="n">response</span><span class="p">.</span><span class="n">url</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">'/'</span><span class="p">)[</span><span class="o">-</span><span class="mi">2</span><span class="p">],</span>
      <span class="s">'header'</span><span class="p">:</span> <span class="n">articleHeader</span><span class="p">,</span>
      <span class="s">'titles-images'</span><span class="p">:</span> <span class="n">memeBlock</span>
    <span class="p">}</span>
    
    <span class="bp">self</span><span class="p">.</span><span class="n">jMaker</span><span class="p">(</span><span class="n">j</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">url</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">'/'</span><span class="p">)[</span><span class="o">-</span><span class="mi">2</span><span class="p">])</span>

    <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">articleCounter</span><span class="si">}</span><span class="s"> - Scraped ...</span><span class="si">{</span><span class="n">response</span><span class="p">.</span><span class="n">url</span><span class="p">[</span><span class="o">-</span><span class="mi">50</span><span class="si">:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="si">}</span><span class="s"> successfully.'</span><span class="p">)</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">outputHtml</span><span class="p">,</span> <span class="s">'a+'</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s">'utf-8'</span><span class="p">)</span> <span class="k">as</span> <span class="n">w</span><span class="p">:</span>
      <span class="n">w</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">html</span><span class="p">)</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">sleeper</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">sleepBetweenArticles</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
  <span class="n">process</span> <span class="o">=</span> <span class="n">CrawlerProcess</span><span class="p">()</span>
  <span class="n">process</span><span class="p">.</span><span class="n">crawl</span><span class="p">(</span><span class="n">baumerSpider</span><span class="p">)</span>
  <span class="n">process</span><span class="p">.</span><span class="n">start</span><span class="p">()</span>

</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#getRandomMemes.py
</span><span class="kn">import</span> <span class="nn">random</span><span class="p">,</span> <span class="n">json</span><span class="p">,</span> <span class="n">time</span><span class="p">,</span> <span class="n">os</span>
<span class="kn">from</span> <span class="nn">random</span> <span class="kn">import</span> <span class="n">choice</span>
<span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">datetime</span> <span class="k">as</span> <span class="n">dt</span>

<span class="k">def</span> <span class="nf">jLoad</span><span class="p">(</span><span class="n">fileName</span><span class="p">):</span>
  <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">fileName</span><span class="p">,</span> <span class="s">'r'</span><span class="p">)</span> <span class="k">as</span> <span class="n">r</span><span class="p">:</span>
    <span class="k">return</span> <span class="n">json</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="n">r</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">getValue</span><span class="p">(</span><span class="n">jFile</span><span class="p">,</span> <span class="n">key</span><span class="p">):</span>
  <span class="k">try</span><span class="p">:</span>
    <span class="n">jk</span> <span class="o">=</span> <span class="n">jFile</span><span class="p">[</span><span class="n">key</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">jk</span>
  <span class="k">except</span><span class="p">:</span>
    <span class="k">raise</span> <span class="nb">ValueError</span><span class="p">(</span><span class="sa">f</span><span class="s">'"</span><span class="si">{</span><span class="n">key</span><span class="si">}</span><span class="s">" is prolly not a valid key'</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">getRandomMemes</span><span class="p">(</span><span class="n">number</span><span class="p">):</span>
  <span class="n">articleBlock</span> <span class="o">=</span> <span class="sa">f</span><span class="s">'# All Ur Meemz R Belog to Uz</span><span class="se">\n</span><span class="s">Last Updated </span><span class="si">{</span><span class="n">dt</span><span class="p">.</span><span class="n">now</span><span class="p">().</span><span class="n">strftime</span><span class="p">(</span><span class="s">"%m.%d.%Y-%H</span><span class="si">:</span><span class="o">%</span><span class="n">M</span><span class="si">:</span><span class="o">%</span><span class="n">S</span><span class="s">")</span><span class="si">}</span><span class="s">&lt;br&gt;All credits to ebaumsworld.com</span><span class="se">\n\n</span><span class="s">'</span>
  <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">number</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
    <span class="c1"># Generate random number provided it has not been used before
</span>    <span class="n">articleNo</span> <span class="o">=</span> <span class="n">choice</span><span class="p">([</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">memeFiles</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="k">if</span> <span class="n">i</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">j</span><span class="p">[</span><span class="s">'memes-used'</span><span class="p">]])</span>
    <span class="n">j</span><span class="p">[</span><span class="s">'memes-used'</span><span class="p">].</span><span class="n">append</span><span class="p">(</span><span class="n">articleNo</span><span class="p">)</span>
    <span class="c1"># After meme index number has been generated, add to 'do not use' list
</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">memerConfig</span><span class="p">,</span> <span class="s">'w'</span><span class="p">)</span> <span class="k">as</span> <span class="n">w</span><span class="p">:</span>
      <span class="n">json</span><span class="p">.</span><span class="n">dump</span><span class="p">(</span><span class="n">j</span><span class="p">,</span> <span class="n">w</span><span class="p">)</span> <span class="c1"># Dump new list, including current random, 'do not use' number
</span>
    <span class="n">folder</span> <span class="o">=</span> <span class="n">memeFiles</span><span class="p">[</span><span class="n">articleNo</span><span class="p">].</span><span class="n">split</span><span class="p">(</span><span class="s">'.json'</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> <span class="c1"># Folder of article number that was picked at random
</span>    <span class="n">folderFileArticle</span> <span class="o">=</span> <span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">walkDir</span><span class="si">}</span><span class="se">\\</span><span class="si">{</span><span class="n">folder</span><span class="si">}</span><span class="se">\\</span><span class="si">{</span><span class="n">memeFiles</span><span class="p">[</span><span class="n">articleNo</span><span class="p">]</span><span class="si">}</span><span class="s">'</span> <span class="c1"># Full file path of randomly selected meme article
</span>
    <span class="n">article</span> <span class="o">=</span> <span class="n">jLoad</span><span class="p">(</span><span class="n">folderFileArticle</span><span class="p">)</span>
    <span class="n">header</span> <span class="o">=</span> <span class="n">getValue</span><span class="p">(</span><span class="n">article</span><span class="p">,</span> <span class="s">'header'</span><span class="p">)</span>
    <span class="n">titlesImages</span> <span class="o">=</span> <span class="n">getValue</span><span class="p">(</span><span class="n">article</span><span class="p">,</span> <span class="s">'titles-images'</span><span class="p">)</span>

    <span class="n">gototop</span> <span class="o">=</span> <span class="s">'&lt;a href="#link0"&gt;GO TO TOP&lt;/a&gt;'</span>
    <span class="n">previous</span> <span class="o">=</span> <span class="sa">f</span><span class="s">'&lt;a href="#link</span><span class="si">{</span><span class="n">x</span><span class="si">}</span><span class="s">"&gt;GO TO PREVIOUS&lt;/a&gt;'</span>
    <span class="n">sourceLink</span> <span class="o">=</span> <span class="sa">f</span><span class="s">'&lt;a href="https://www.ebaumsworld.com/pictures/-/</span><span class="si">{</span><span class="n">folder</span><span class="si">}</span><span class="s">/"&gt;Original Article &lt;b&gt;with&lt;/b&gt; Ads&lt;/a&gt;'</span>

    <span class="n">articleBlock</span> <span class="o">+=</span> <span class="sa">f</span><span class="s">'## &lt;a href="#link</span><span class="si">{</span><span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="si">}</span><span class="s">" id="link</span><span class="si">{</span><span class="n">x</span><span class="si">}</span><span class="s">"&gt;</span><span class="si">{</span><span class="n">header</span><span class="si">}</span><span class="s">&lt;/a&gt;</span><span class="se">\n</span><span class="s">'</span>

    <span class="k">for</span> <span class="n">ti</span> <span class="ow">in</span> <span class="n">titlesImages</span><span class="p">:</span>
      <span class="n">title</span><span class="p">,</span> <span class="n">image</span> <span class="o">=</span> <span class="n">ti</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">ti</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
      <span class="n">articleBlock</span> <span class="o">+=</span> <span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">title</span><span class="si">}</span><span class="se">\n</span><span class="s">&lt;img src="</span><span class="si">{</span><span class="n">image</span><span class="si">}</span><span class="s">"&gt;</span><span class="se">\n\n</span><span class="s">'</span>
    
    <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">'Writing article </span><span class="si">{</span><span class="n">x</span><span class="si">}</span><span class="s">'</span><span class="p">)</span>
    <span class="n">articleBlock</span> <span class="o">+=</span> <span class="sa">f</span><span class="s">'</span><span class="se">\n</span><span class="si">{</span><span class="n">sourceLink</span><span class="si">}</span><span class="se">\n\n</span><span class="si">{</span><span class="n">gototop</span><span class="si">}</span><span class="se">\n\n</span><span class="si">{</span><span class="n">previous</span><span class="si">}</span><span class="se">\n\n</span><span class="s">'</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">'README.MD'</span><span class="p">,</span> <span class="s">'a'</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s">'utf-8'</span><span class="p">)</span> <span class="k">as</span> <span class="n">a</span><span class="p">:</span>
      <span class="n">a</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">articleBlock</span><span class="p">)</span>
    <span class="n">articleBlock</span> <span class="o">=</span> <span class="s">''</span>

<span class="n">memerConfig</span> <span class="o">=</span> <span class="s">'memer-config.json'</span>
<span class="n">walkDir</span> <span class="o">=</span> <span class="s">'./all-files'</span> <span class="c1">#f'{os.environ["USERPROFILE"]}\\Desktop\\files' # Location of article jsons
</span>
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">'README.md'</span><span class="p">,</span> <span class="s">'w'</span><span class="p">)</span> <span class="k">as</span> <span class="n">w</span><span class="p">:</span> <span class="c1"># Generate file if doesn't exist or clear file from previous run
</span>  <span class="n">w</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="s">''</span><span class="p">)</span>

<span class="n">j</span> <span class="o">=</span> <span class="n">jLoad</span><span class="p">(</span><span class="n">memerConfig</span><span class="p">)</span>
<span class="n">memeFiles</span> <span class="o">=</span> <span class="p">[]</span> <span class="c1"># List of all meme json files
</span><span class="k">for</span> <span class="n">root</span><span class="p">,</span> <span class="n">dirs</span><span class="p">,</span> <span class="n">files</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="n">walk</span><span class="p">(</span><span class="n">walkDir</span><span class="p">):</span>
  <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">files</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span> <span class="c1"># Do not include files in parent directory
</span>    <span class="n">memeFiles</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">files</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>

<span class="n">getRandomMemes</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name>{&quot;name&quot;=&gt;nil, &quot;picture&quot;=&gt;nil, &quot;email&quot;=&gt;nil, &quot;twitter&quot;=&gt;nil, &quot;links&quot;=&gt;[{&quot;title&quot;=&gt;nil, &quot;url&quot;=&gt;nil, &quot;icon&quot;=&gt;nil}]}</name></author><category term="Python" /><category term="Webscraping" /><category term="Scrapy" /><summary type="html"><![CDATA[Memer.py Scrape frontpage memes from Ebaumsworld.com Polite scraping sleep timer Scrape unique meme article number Save article-number.json to folder of the same number This json contains article-number, image url and image title Output README.md with titles, images, Back, Go To Top and Source buttons]]></summary></entry><entry><title type="html">Adventure: Buildroot</title><link href="https://onthefritzz.com/buildroot-python/" rel="alternate" type="text/html" title="Adventure: Buildroot" /><published>2023-02-05T00:00:00-06:00</published><updated>2023-02-05T00:00:00-06:00</updated><id>https://onthefritzz.com/buildroot-python</id><content type="html" xml:base="https://onthefritzz.com/buildroot-python/"><![CDATA[<p><img src="/images/buildroot-example.png" /></p>

<p>Objective: Boot to a python controlled GPIO pin as fast as possible.<br />
TL;DR: Image that supports python, nano and libgpio while booting in 4 seconds: <a href="/images/boots-in-four-secs-with-libgpiod-python.img">Download</a></p>

<p>Using python to manipulate GPIOs on a SBC is old news. Doing it in 4 seconds, is not. Stock Armbian has gotten me pretty far and honestly, 35 seconds to login prompt from a base install is much appreciated. At the same time, waiting 35 seconds to flip a switch is far too long. How fast can we boot to trigger a GPIO pin? Enter buildroot.</p>

<p>Never touched buildroot, only ever had it referenced in passing. Simply put, its roll your own linux. However, you’re welcoming a hard time in terms of device and driver support. Good thing we only need two things. Python and libgpiod. The end result will not even support the onboard USB or ethernet port, literally attached to the device.</p>

<p>Here’s where we ended after alot of trial and error.</p>

<ul>
  <li>Download buildroot: https://git.busybox.net/buildroot/</li>
  <li>Extract the contents</li>
  <li><code class="language-plaintext highlighter-rouge">cd</code> into it’s directory</li>
</ul>

<p>Make sure the version downloaded contains defconfigs for the desired board. Here’s an example of where it would be located for the NanoPi Neo board we’re using: <br />
<code class="language-plaintext highlighter-rouge">buildroot-2022.02.9\configs\friendlyarm_nanopi_neo_defconfig</code></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get <span class="nb">install </span>build-essential
<span class="nb">sudo </span>apt-get <span class="nb">install </span>python3-dev <span class="nt">-y</span>
<span class="nb">sudo </span>apt-get <span class="nb">install </span>libncurses5-dev libncursesw5-dev <span class="nt">-y</span>
<span class="nb">cd</span> ./buildroot-buildroot-2022.02.9 <span class="c"># Replace with your buildroot version</span>
make friendlyarm_nanopi_neo_defconfig
</code></pre></div></div>

<p>There should be a command prompt UI now. Here’s the following prompts/boxes that were checked in order to support <code class="language-plaintext highlighter-rouge">python</code>, <code class="language-plaintext highlighter-rouge">libgpiod</code> and <code class="language-plaintext highlighter-rouge">nano</code>.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>make menuconfig
</code></pre></div></div>
<ul>
  <li>Toolchain –&gt; Enable WCHAR support</li>
  <li>Target packages –&gt; Interpreter languages and scripting –&gt; python3 –&gt; <em>select</em></li>
  <li>Target packages –&gt; Interpreter languages and scripting –&gt; pythonn3 module format to install –&gt; .py sources and .pyc compiled</li>
  <li>Target packages –&gt; Text editors and viewers –&gt; nano –&gt; <em>select</em></li>
  <li>Target packages –&gt; Libraries –&gt; Hardware handling –&gt; libgpiod –&gt; <em>select</em></li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>make uboot-menuconfig
</code></pre></div></div>
<ul>
  <li>delay in seconds before automatically booting –&gt; Set to 0</li>
  <li>Device drivers —&gt; USB Support –&gt; Uncheck evertything here</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>make
</code></pre></div></div>

<p>There should now be an sdcard.img file in the <code class="language-plaintext highlighter-rouge">buildroot-2022.02.9/output/images/</code> folder.
The following commands are to start a python script immediately after boot, prior to even logging in.</p>

<p>The following will save a file <code class="language-plaintext highlighter-rouge">999app.sh</code> into <code class="language-plaintext highlighter-rouge">/etc/init.d</code> which will start python script on boot.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> <span class="o">&lt;&lt;</span><span class="no">EOT</span><span class="sh"> &gt;&gt; /etc/init.d/999app.sh
#!/bin/sh
python3 /etc/init.d/buildrootGPIO.py
</span><span class="no">EOT
</span></code></pre></div></div>

<p>Create a dead simple python script that will trigger a relay using libgrpiod:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> <span class="o">&lt;&lt;</span><span class="no">EOT</span><span class="sh"> &gt;&gt; /etc/init.d/buildrootGPIO.py
import time, os

PG11 = 203
PG11Down = f'gpioset 0 {PG11}=0'
PG11Up = f'gpioset 0 {PG11}=1'

for x in range(5):
  time.sleep(1)
  os.system(PG11Down)
  #print(f'os.system({PG11Down})')
  
  time.sleep(1)
  os.system(PG11Up)
  #print(f'os.system({PG11Up})')
print('Done.')
</span><span class="no">EOT
</span></code></pre></div></div>]]></content><author><name>{&quot;name&quot;=&gt;nil, &quot;picture&quot;=&gt;nil, &quot;email&quot;=&gt;nil, &quot;twitter&quot;=&gt;nil, &quot;links&quot;=&gt;[{&quot;title&quot;=&gt;nil, &quot;url&quot;=&gt;nil, &quot;icon&quot;=&gt;nil}]}</name></author><category term="Buildroot" /><category term="Python" /><category term="GPIO" /><category term="NanoPi Neo" /><summary type="html"><![CDATA[]]></summary></entry></feed>