<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="https://onthefritzz.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://onthefritzz.com/" rel="alternate" type="text/html" /><updated>2024-07-19T22:19:29-05:00</updated><id>https://onthefritzz.com/feed.xml</id><title type="html">Uneducated Technology</title><subtitle>Follow a meandering career in tech...</subtitle><author><name>{&quot;name&quot;=&gt;nil, &quot;picture&quot;=&gt;nil, &quot;email&quot;=&gt;nil, &quot;twitter&quot;=&gt;nil, &quot;links&quot;=&gt;[{&quot;title&quot;=&gt;nil, &quot;url&quot;=&gt;nil, &quot;icon&quot;=&gt;nil}]}</name></author><entry><title type="html">Easy Button</title><link href="https://onthefritzz.com/easy-button/" rel="alternate" type="text/html" title="Easy Button" /><published>2024-07-19T00:00:00-05:00</published><updated>2024-07-19T00:00:00-05:00</updated><id>https://onthefritzz.com/easy-button</id><content type="html" xml:base="https://onthefritzz.com/easy-button/"><![CDATA[<p><img src="/images/digispark-buttons-schema.png" alt="image-center" /></p>

<p>Lets keep it easy and create a giant easy button to fire off a frequently used script.</p>

<ul>
  <li>Get an Attiny85/Digispark device and giant switch</li>
  <li>Download and install Arduino IDE</li>
  <li>Digistump.com is no longer live. Add following url to Arduino &gt; File &gt; Preferences &gt; “boards manager URL”
    <ul>
      <li>https://raw.githubusercontent.com/digistump/arduino-boards-index/master/package_digistump_index.json</li>
    </ul>
  </li>
  <li>Get digispark drivers <a href="https://github.com/digistump/DigistumpArduino/releases">here</a></li>
  <li>Flash following code to attiny85</li>
  <li>Use above schematic to wire an external switch to Digispark device
    <ul>
      <li>Device has internal PULLUP resistors but they frequently produce erratic results</li>
    </ul>
  </li>
  <li>Create a .bat file that will execute a python script
    <ul>
      <li>Right-Click .bat file and assign a shortcut key of CTRL+ALT+X</li>
    </ul>
  </li>
</ul>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">"DigiKeyboard.h"</span><span class="cp">
</span>
<span class="kt">int</span> <span class="n">button2</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">pinMode</span><span class="p">(</span><span class="n">button2</span><span class="p">,</span> <span class="n">INPUT</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="n">button2State</span> <span class="o">=</span> <span class="n">digitalRead</span><span class="p">(</span><span class="n">button2</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">button2State</span> <span class="o">==</span> <span class="n">HIGH</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">DigiKeyboard</span><span class="p">.</span><span class="n">sendKeyStroke</span><span class="p">(</span><span class="n">KEY_X</span><span class="p">,</span> <span class="n">MOD_CONTROL_LEFT</span> <span class="o">|</span> <span class="n">MOD_ALT_LEFT</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="n">delay</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
<span class="p">}</span>

</code></pre></div></div>

<p>Easy. Peasy.<br />
<img src="/images/easypeasy.jpg" alt="image-center" /></p>]]></content><author><name>{&quot;name&quot;=&gt;nil, &quot;picture&quot;=&gt;nil, &quot;email&quot;=&gt;nil, &quot;twitter&quot;=&gt;nil, &quot;links&quot;=&gt;[{&quot;title&quot;=&gt;nil, &quot;url&quot;=&gt;nil, &quot;icon&quot;=&gt;nil}]}</name></author><category term="Digispark" /><category term="Arduino" /><category term="Hardware" /><category term="GPIO" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Aww, you guys made me ink!</title><link href="https://onthefritzz.com/eink-display/" rel="alternate" type="text/html" title="Aww, you guys made me ink!" /><published>2024-05-28T00:00:00-05:00</published><updated>2024-05-28T00:00:00-05:00</updated><id>https://onthefritzz.com/eink-display</id><content type="html" xml:base="https://onthefritzz.com/eink-display/"><![CDATA[<p><img src="/images/einkdisplay.png" alt="image-center" /></p>

<p>Project was to revitalize some disposed eReaders into functional wireless displays. Project was a success. It required several different hoops that I prolly spent too long jumping through given the outcome. However here’s the end result. A functional, wireless, status dashboard that can be updated every minute for ~3 days without a charge.</p>

<p>Hoops are as follows:</p>
<ul>
  <li>Root multiple Nook eReaders (Model: BNRV300)
    <ul>
      <li>Depending on health of batteries, order new ones and replace them.</li>
    </ul>
  </li>
  <li>Use Raspi 3+ in tandem with a DHT11 sensor to serve an <b>unsecured</b> webpage through AP Mode
    <ul>
      <li>Alternatively, use GitHub Pages to point to a custom domain that hosts webpage for display</li>
      <li>Update 7.19.24: Ultimately the ap mode was nixed and display was hosted on an unsecured github page</li>
    </ul>
  </li>
  <li>Create a python script that will use APIs and get custom data points
    <ul>
      <li>Generate a basic webpage that will dynamically display on eReader</li>
    </ul>
  </li>
</ul>

<p>Rooting the Nook Simple Touch BNRV300:<br />
Pretty much all that is to follow is based on <a href="https://shkspr.mobi/blog/2020/02/turn-an-old-ereader-into-an-information-screen-nook-str/">this</a> tutorial.</p>

<ul>
  <li>Deregister the Nook</li>
  <li>Download all the required files here: <a href="https://gitlab.com/edent/nook-screen/-/tree/master">Root Nook Files</a></li>
  <li>Unzip NookManager.zip
    <ul>
      <li>Use <a href="https://win32diskimager.org/">Win32Imager</a> or <a href="https://etcher.balena.io/">Balena Etcher</a> to write “NookManager.img” to SD Card</li>
    </ul>
  </li>
  <li>Download and extract Android Debug Bridge (adb.exe). Which is bundled in the Andoid SDK Platform Tools, available <a href="https://developer.android.com/tools/releases/platform-tools">here</a>
    <ul>
      <li>From a command window openned to the folder of the the extracted SDK Tools run the following command: <code class="language-plaintext highlighter-rouge">adb install Electric\ Sign_v1.0.3_apkpure.com.apk</code></li>
    </ul>
  </li>
</ul>

<p>Setup Raspi with DHT Sensor and Bridged Ethernet to Wifi Module set in AP Mode:
Credit:</p>
<ul>
  <li><a href="https://pimylifeup.com/raspberry-pi-dht11-sensor/">DHT11 Sensor Setup</a></li>
  <li><a href="https://www.raspberrypi.com/documentation/computers/configuration.html#use-your-raspberry-pi-as-a-network-bridge">Bridge Ethernet to AP Mode Hotspot</a></li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Update Raspi</span>
<span class="nb">sudo </span>apt-get update
<span class="nb">sudo </span>apt-get upgrade <span class="nt">-y</span>

<span class="c"># Install tool to serve index.html webpage</span>
<span class="nb">sudo </span>apt <span class="nb">install </span>snapd
<span class="nb">sudo </span>reboot
<span class="nb">sudo </span>snap <span class="nb">install </span>core
<span class="nb">sudo </span>snap <span class="nb">install </span>serve

<span class="c"># Install resources to use DHT11 sensor</span>
<span class="nb">sudo </span>apt <span class="nb">install </span>python3 python3-pip python3-venv
<span class="nb">mkdir</span> ~./ebook
python3 <span class="nt">-m</span> venv <span class="nb">env
source env</span>/bin/activate
python3 <span class="nt">-m</span> pip <span class="nb">install </span>adafruit-circuitpython-dht

<span class="c"># Turn Wifi module into AP Mode (Hotspot) and bridge it to Ethernet that has incoming internet connection</span>

<span class="nb">sudo </span>nmcli connection add <span class="nb">type </span>bridge con-name <span class="s1">'Bridge'</span> ifname bridge0

<span class="nb">sudo </span>nmcli connection add <span class="nb">type </span>ethernet slave-type bridge <span class="se">\</span>
    con-name <span class="s1">'Ethernet'</span> ifname eth0 master bridge0

<span class="nb">sudo </span>nmcli connection add con-name <span class="s1">'Hotspot'</span> <span class="se">\</span>
    ifname wlan0 <span class="nb">type </span>wifi slave-type bridge master bridge0 <span class="se">\</span>
    wifi.mode ap wifi.ssid Hotspot wifi-sec.key-mgmt wpa-psk <span class="se">\</span>
    wifi-sec.proto rsn wifi-sec.pairwise ccmp <span class="se">\</span>
    wifi-sec.psk PUTYOURHOTSPOTRPASSWORDHERE

<span class="nb">sudo </span>nmcli connection up Bridge
<span class="nb">sudo </span>nmcli connection up Hotspot

</code></pre></div></div>

<p>Connect Raspi to DHT11 Sensor
<img src="/images/dhtraspi.png" alt="image-center" /></p>

<p>Test the DHT11 sensor by either calling e.getWarehouseTemp() instead of the while loop, in the script below. Or reference tutorial above for source code that <b>only</b> pulls the DHT11 sensor stats.</p>

<p>Creating a Python Script to Scrape stats and generate webpage:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">debug</span> <span class="o">=</span> <span class="bp">False</span>

<span class="kn">import</span> <span class="nn">requests</span><span class="p">,</span> <span class="n">shutil</span><span class="p">,</span> <span class="n">time</span><span class="p">,</span> <span class="n">yaml</span><span class="p">,</span> <span class="n">os</span>
<span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">datetime</span> <span class="k">as</span> <span class="n">dt</span>

<span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">name</span> <span class="o">!=</span> <span class="s">'nt'</span><span class="p">:</span>
    <span class="kn">import</span> <span class="nn">board</span><span class="p">,</span> <span class="n">adafruit_dht</span>

<span class="k">class</span> <span class="nc">eReader</span><span class="p">():</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="sa">f</span><span class="s">'./config.yaml'</span><span class="p">,</span> <span class="s">'r'</span><span class="p">)</span> <span class="k">as</span> <span class="n">y</span><span class="p">:</span>
            <span class="n">yml</span> <span class="o">=</span> <span class="n">yaml</span><span class="p">.</span><span class="n">safe_load</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>

        <span class="c1">#print(yml)
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">distanceEndpoint</span> <span class="o">=</span> <span class="n">yml</span><span class="p">[</span><span class="s">'distanceEndpoint'</span><span class="p">]</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">noaaEndpoint</span> <span class="o">=</span> <span class="n">yml</span><span class="p">[</span><span class="s">'noaaEndpoint'</span><span class="p">]</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">ethEndpoint</span> <span class="o">=</span> <span class="n">yml</span><span class="p">[</span><span class="s">'ethEndpoint'</span><span class="p">]</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">htmlOutputFile</span> <span class="o">=</span> <span class="n">yml</span><span class="p">[</span><span class="s">'htmlOutput'</span><span class="p">]</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">gitterFilePath</span> <span class="o">=</span> <span class="n">yml</span><span class="p">[</span><span class="s">'gitterFilePath'</span><span class="p">]</span>

        <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">name</span> <span class="o">!=</span> <span class="s">'nt'</span><span class="p">:</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">filePath</span> <span class="o">=</span> <span class="n">yml</span><span class="p">[</span><span class="s">'linuxFilePath'</span><span class="p">]</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">filePath</span> <span class="o">=</span> <span class="n">yml</span><span class="p">[</span><span class="s">'windowsFilePath'</span><span class="p">]</span>

    <span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">display</span><span class="o">=</span><span class="s">''</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">display</span> <span class="o">==</span> <span class="s">'breaktime'</span><span class="p">:</span>
            <span class="n">shutil</span><span class="p">.</span><span class="n">copyfile</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">filePath</span><span class="si">}</span><span class="s">breaktime.html'</span><span class="p">,</span> <span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">filePath</span><span class="si">}</span><span class="s">index.html'</span><span class="p">)</span>
            <span class="k">print</span><span class="p">(</span><span class="s">'Updated display to breaktime.'</span><span class="p">)</span>
        
        <span class="k">elif</span> <span class="n">display</span> <span class="o">==</span> <span class="s">'stats'</span><span class="p">:</span>
            <span class="n">dashboardHtml</span> <span class="o">=</span> <span class="s">"""
    &lt;!DOCTYPE html&gt;
    &lt;html&gt;
    &lt;head&gt;
    &lt;script&gt;
    setInterval(function() {
     window.location.reload();
    }, 300_000);
    &lt;/script&gt;
    &lt;style&gt;
    .card {
      /* Add shadows to create the "card" effect */
      box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);
      transition: 0.3s;
    }

    /* On mouse-over, add a deeper shadow */
    .card:hover {
      box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2);
    }

    /* Add some padding inside the card container */
    .container {
      padding: 2px 16px;
    }

    .card {
      border: 1px solid #000;
      display: inline-block;
      padding: 10px;
      margin: 5px;
      height: 240px; /*240px*/
      width: 300px;  /*300px*/
    }

    .weatherImg {
      opacity: 0.80;
    }

    &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
    &lt;center&gt;
    &lt;div class="card"&gt;
        &lt;img src="../images/commute.png" alt="Avatar"&gt;
        &lt;div class="container"&gt;
          &lt;h8&gt;&lt;b&gt;#COMMUTETITLE#&lt;/b&gt;&lt;/h8&gt;&lt;br&gt;
          &lt;font size="30"&gt;&lt;b&gt;#COMMUTESTATUS#&lt;/b&gt;&lt;/font&gt;&lt;/h9&gt;
        &lt;/div&gt;
    &lt;/div&gt;

    &lt;div class="card"&gt;
        &lt;img src="../images/ether.png" alt="Avatar"&gt;
        &lt;div class="container"&gt;
          &lt;h8&gt;&lt;b&gt;#ETHERTITLE#&lt;/b&gt;&lt;/h8&gt;&lt;br&gt;
          &lt;font size="30"&gt;&lt;b&gt;#ETHERPRICE#&lt;/b&gt;&lt;/font&gt;&lt;/h9&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;br&gt;
    &lt;div class="card"&gt;
        &lt;img src="../images/warehouse.png" alt="Avatar"&gt;
        &lt;div class="container"&gt;
          &lt;h8&gt;&lt;b&gt;#WAREHOUSETITLE#&lt;/b&gt;&lt;/h8&gt;&lt;/font&gt;&lt;br&gt;
          &lt;font size="30"&gt;&lt;b&gt;#WAREHOUSETEMP#&lt;/b&gt;&lt;/font&gt;&lt;br&gt;
        &lt;/div&gt;
    &lt;/div&gt;

    &lt;div class="card"&gt;
        &lt;!--&lt;img src="thermo.png" alt="Avatar"&gt;--&gt;
        &lt;img src="../images/weather.png" alt="Avatar"&gt;
        &lt;!--&lt;div class="weatherImg"&gt;&lt;img src="#WEATHERICON#" alt="Avatar" width="150" height="150"&gt;&lt;/div&gt;--&gt;
        &lt;div class="container"&gt;
          &lt;h8&gt;&lt;b&gt;#OUTSIDETITLE#&lt;/b&gt;&lt;/h8&gt;&lt;/font&gt;&lt;br&gt;
          &lt;font size="30"&gt;&lt;b&gt;#OUTSIDETEMP#&lt;/b&gt;&lt;/font&gt;&lt;br&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;br&gt;
    #TIMESTAMP#
    &lt;/center&gt;
    &lt;/body&gt;
    &lt;/html&gt;                    
    """</span>
            <span class="n">travelTitle</span> <span class="o">=</span> <span class="s">'Drive Home'</span>

            <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">filePath</span><span class="si">}</span><span class="s">current-travel-time.txt'</span><span class="p">,</span> <span class="s">'r'</span><span class="p">)</span> <span class="k">as</span> <span class="n">r</span><span class="p">:</span> <span class="c1">#self.getTravelTime() # '17-21mins'#
</span>                <span class="n">travelInfo</span> <span class="o">=</span> <span class="n">r</span><span class="p">.</span><span class="n">readlines</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span>
                <span class="k">print</span><span class="p">(</span><span class="n">travelInfo</span><span class="p">)</span>

            <span class="n">whTitle</span> <span class="o">=</span> <span class="s">'Warehouse Temp/Humidity'</span>
            
            <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">name</span> <span class="o">!=</span> <span class="s">'nt'</span><span class="p">:</span>
                <span class="n">whTempHumid</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">getWarehouseTemp</span><span class="p">()</span> <span class="c1">#'57&amp;#176;F / 45%'
</span>            <span class="k">else</span><span class="p">:</span>
                <span class="n">whTempHumid</span> <span class="o">=</span> <span class="s">'12&amp;#176;F / 99%'</span>

            <span class="n">outsideTitle</span> <span class="o">=</span> <span class="s">'Outside Temp/Humidity'</span>
            <span class="n">outsideTempHumid</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">scrapeNOAA</span><span class="p">()</span>

            <span class="n">cryptoTitle</span> <span class="o">=</span> <span class="s">'Current ETHEREUM'</span>
            <span class="n">cryptoPrice</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">getCryptoPrice</span><span class="p">()</span>

            <span class="n">currentTime</span> <span class="o">=</span> <span class="sa">f</span><span class="s">'APIs Last Updated: </span><span class="si">{</span><span class="n">dt</span><span class="p">.</span><span class="n">now</span><span class="p">().</span><span class="n">strftime</span><span class="p">(</span><span class="s">"%m-%d-%Y %H</span><span class="si">:</span><span class="o">%</span><span class="n">M</span><span class="si">:</span><span class="o">%</span><span class="n">S</span><span class="s">")</span><span class="si">}</span><span class="s">'</span>

            <span class="n">dashboardHtml</span> <span class="o">=</span> <span class="n">dashboardHtml</span><span class="p">.</span><span class="n">replace</span><span class="p">(</span><span class="s">'#WAREHOUSETITLE#'</span><span class="p">,</span> <span class="n">whTitle</span><span class="p">).</span><span class="n">replace</span><span class="p">(</span><span class="s">'#WAREHOUSETEMP#'</span><span class="p">,</span> <span class="n">whTempHumid</span><span class="p">)</span>
            <span class="n">dashboardHtml</span> <span class="o">=</span> <span class="n">dashboardHtml</span><span class="p">.</span><span class="n">replace</span><span class="p">(</span><span class="s">'#COMMUTETITLE#'</span><span class="p">,</span> <span class="n">travelTitle</span><span class="p">).</span><span class="n">replace</span><span class="p">(</span><span class="s">'#COMMUTESTATUS#'</span><span class="p">,</span> <span class="n">travelInfo</span><span class="p">)</span>
            <span class="n">dashboardHtml</span> <span class="o">=</span> <span class="n">dashboardHtml</span><span class="p">.</span><span class="n">replace</span><span class="p">(</span><span class="s">'#OUTSIDETITLE#'</span><span class="p">,</span> <span class="n">outsideTitle</span><span class="p">).</span><span class="n">replace</span><span class="p">(</span><span class="s">'#OUTSIDETEMP#'</span><span class="p">,</span> <span class="n">outsideTempHumid</span><span class="p">)</span>
            <span class="c1">#dashboardHtml = dashboardHtml.replace('#WEATHERICON#', weatherIcon)
</span>            <span class="n">dashboardHtml</span> <span class="o">=</span> <span class="n">dashboardHtml</span><span class="p">.</span><span class="n">replace</span><span class="p">(</span><span class="s">'#ETHERTITLE#'</span><span class="p">,</span> <span class="n">cryptoTitle</span><span class="p">).</span><span class="n">replace</span><span class="p">(</span><span class="s">'#ETHERPRICE#'</span><span class="p">,</span> <span class="n">cryptoPrice</span><span class="p">)</span>
            <span class="n">dashboardHtml</span> <span class="o">=</span> <span class="n">dashboardHtml</span><span class="p">.</span><span class="n">replace</span><span class="p">(</span><span class="s">'#TIMESTAMP#'</span><span class="p">,</span> <span class="n">currentTime</span><span class="p">)</span>
            
            <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">filePath</span><span class="si">}{</span><span class="bp">self</span><span class="p">.</span><span class="n">htmlOutputFile</span><span class="si">}</span><span class="s">'</span><span class="p">,</span> <span class="s">'w+'</span><span class="p">)</span> <span class="k">as</span> <span class="n">html</span><span class="p">:</span>
              <span class="n">html</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">dashboardHtml</span><span class="p">)</span>
            
            <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">filePath</span><span class="si">}</span><span class="s">index.html'</span><span class="p">,</span> <span class="s">'w+'</span><span class="p">)</span> <span class="k">as</span> <span class="n">html</span><span class="p">:</span>
                <span class="n">html</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">dashboardHtml</span><span class="p">)</span>

            <span class="k">print</span><span class="p">(</span><span class="s">'Updated display to stats.'</span><span class="p">)</span>

        <span class="k">elif</span> <span class="n">display</span> <span class="o">==</span> <span class="s">'logo'</span><span class="p">:</span>
            <span class="n">shutil</span><span class="p">.</span><span class="n">copyfile</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">filePath</span><span class="si">}</span><span class="s">logo.html'</span><span class="p">,</span> <span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">filePath</span><span class="si">}</span><span class="s">index.html'</span><span class="p">)</span>
            <span class="k">print</span><span class="p">(</span><span class="s">'Updated display to logo.'</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">scrapeNOAA</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">:</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">noaaGet</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">noaaEndpoint</span><span class="p">)</span>
                <span class="n">noaaJson</span> <span class="o">=</span> <span class="n">noaaGet</span><span class="p">.</span><span class="n">json</span><span class="p">()</span>

                <span class="n">todayForecast</span> <span class="o">=</span> <span class="n">noaaJson</span><span class="p">[</span><span class="s">'properties'</span><span class="p">][</span><span class="s">'periods'</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>

                <span class="c1">#icon = f'http://api.weather.gov{todayForecast["icon"]}'
</span>                <span class="n">temp</span><span class="p">,</span> <span class="n">unit</span> <span class="o">=</span> <span class="p">[</span><span class="n">todayForecast</span><span class="p">[</span><span class="s">'temperature'</span><span class="p">],</span> <span class="n">todayForecast</span><span class="p">[</span><span class="s">'temperatureUnit'</span><span class="p">]]</span>
                <span class="k">try</span><span class="p">:</span>
                    <span class="n">humidity</span> <span class="o">=</span> <span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">todayForecast</span><span class="p">[</span><span class="s">'relativeHumidity'</span><span class="p">][</span><span class="s">'value'</span><span class="p">]</span><span class="si">}</span><span class="s">"</span>
                <span class="k">except</span><span class="p">:</span>
                    <span class="n">humidity</span> <span class="o">=</span> <span class="s">"NA"</span>

                <span class="n">printString</span> <span class="o">=</span> <span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">temp</span><span class="si">}</span><span class="s">*</span><span class="si">{</span><span class="n">unit</span><span class="si">}</span><span class="s"> / </span><span class="si">{</span><span class="n">humidity</span><span class="si">}</span><span class="s">%'</span>
                <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">'Outside Temp: </span><span class="si">{</span><span class="n">printString</span><span class="si">}</span><span class="s">'</span><span class="p">)</span>

                <span class="n">outputArray</span> <span class="o">=</span> <span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">temp</span><span class="si">}</span><span class="s">&amp;#176;</span><span class="si">{</span><span class="n">unit</span><span class="si">}</span><span class="s"> / </span><span class="si">{</span><span class="n">humidity</span><span class="si">}</span><span class="s">%'</span><span class="c1">#, icon]
</span>                <span class="k">return</span><span class="p">(</span><span class="n">outputArray</span><span class="p">)</span>
            
            <span class="k">except</span><span class="p">:</span>
                <span class="n">x</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="n">outputArray</span> <span class="o">=</span> <span class="p">[</span><span class="sa">f</span><span class="s">'NA / NA'</span><span class="p">,</span> <span class="s">'NA'</span><span class="p">]</span>
                <span class="k">continue</span>

        <span class="k">return</span><span class="p">(</span><span class="n">outputArray</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">getWarehouseTemp</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">:</span> <span class="c1"># DHT11 doesn't output stats 100% of the time. Seems to be &gt; 5/1 hit to miss ratio.
</span>            <span class="k">try</span><span class="p">:</span> <span class="c1"># Try catching temp/humid 5x before moving along
</span>                <span class="n">dhtDevice</span> <span class="o">=</span> <span class="n">adafruit_dht</span><span class="p">.</span><span class="n">DHT11</span><span class="p">(</span><span class="n">board</span><span class="p">.</span><span class="n">D4</span><span class="p">)</span>
                <span class="n">tempC</span> <span class="o">=</span> <span class="n">dhtDevice</span><span class="p">.</span><span class="n">temperature</span>
                <span class="n">tempF</span> <span class="o">=</span> <span class="nb">round</span><span class="p">(</span><span class="n">tempC</span> <span class="o">*</span> <span class="p">(</span><span class="mi">9</span> <span class="o">/</span> <span class="mi">5</span><span class="p">)</span> <span class="o">+</span> <span class="mi">32</span><span class="p">)</span>

                <span class="n">humidity</span> <span class="o">=</span> <span class="n">dhtDevice</span><span class="p">.</span><span class="n">humidity</span>
                <span class="n">dhtDevice</span><span class="p">.</span><span class="nb">exit</span><span class="p">()</span>

                <span class="n">printString</span> <span class="o">=</span> <span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">tempF</span><span class="si">}</span><span class="s">*F / </span><span class="si">{</span><span class="n">humidity</span><span class="si">}</span><span class="s">%'</span>
                <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">'Warehouse Temp: </span><span class="si">{</span><span class="n">printString</span><span class="si">}</span><span class="s">'</span><span class="p">)</span>
                <span class="n">outputString</span> <span class="o">=</span> <span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">tempF</span><span class="si">}</span><span class="s">&amp;#176;F / </span><span class="si">{</span><span class="n">humidity</span><span class="si">}</span><span class="s">%'</span>
                <span class="k">return</span><span class="p">(</span><span class="n">outputString</span><span class="p">)</span>
            
            <span class="k">except</span><span class="p">:</span>
                <span class="n">x</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="n">dhtDevice</span><span class="p">.</span><span class="nb">exit</span><span class="p">()</span>
                <span class="k">print</span><span class="p">(</span><span class="s">'Warehouse temp error!'</span><span class="p">)</span>
                <span class="n">outputString</span> <span class="o">=</span> <span class="sa">f</span><span class="s">'NA / NA'</span>
                <span class="n">time</span><span class="p">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
                <span class="k">continue</span>

        <span class="k">return</span><span class="p">(</span><span class="n">outputString</span><span class="p">)</span>
        
    <span class="k">def</span> <span class="nf">getCryptoPrice</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">cryptoPrice</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">ethEndpoint</span><span class="p">)</span>
        <span class="n">cryptoJson</span> <span class="o">=</span> <span class="n">cryptoPrice</span><span class="p">.</span><span class="n">json</span><span class="p">()</span>
        <span class="n">cryptoToUSD</span> <span class="o">=</span> <span class="nb">round</span><span class="p">(</span><span class="nb">float</span><span class="p">(</span><span class="n">cryptoJson</span><span class="p">[</span><span class="s">'data'</span><span class="p">][</span><span class="s">'amount'</span><span class="p">]),</span> <span class="mi">2</span><span class="p">)</span>
        <span class="n">outputString</span> <span class="o">=</span> <span class="sa">f</span><span class="s">'$</span><span class="si">{</span><span class="n">cryptoToUSD</span><span class="si">}</span><span class="s">'</span>

        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">'Crypto: </span><span class="si">{</span><span class="n">outputString</span><span class="si">}</span><span class="s">'</span><span class="p">)</span>
        <span class="k">return</span><span class="p">(</span><span class="n">outputString</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">getTravelTime</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">responseJson</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">distanceEndpoint</span><span class="p">).</span><span class="n">json</span><span class="p">()</span>
        <span class="n">durationTime</span> <span class="o">=</span> <span class="n">responseJson</span><span class="p">[</span><span class="s">'rows'</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s">'elements'</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s">'duration'</span><span class="p">][</span><span class="s">'text'</span><span class="p">]</span>
        <span class="n">durationInTraffic</span> <span class="o">=</span> <span class="n">responseJson</span><span class="p">[</span><span class="s">'rows'</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s">'elements'</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s">'duration_in_traffic'</span><span class="p">][</span><span class="s">'text'</span><span class="p">]</span>
        <span class="n">travelTimeRange</span> <span class="o">=</span> <span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">durationTime</span><span class="p">.</span><span class="n">replace</span><span class="p">(</span><span class="s">" mins"</span><span class="p">,</span> <span class="s">""</span><span class="p">)</span><span class="si">}</span><span class="s">-</span><span class="si">{</span><span class="n">durationInTraffic</span><span class="si">}</span><span class="s">'</span>

        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">filePath</span><span class="si">}</span><span class="s">current-travel-time.txt'</span><span class="p">,</span> <span class="s">'w+'</span><span class="p">)</span> <span class="k">as</span> <span class="n">w</span><span class="p">:</span>
            <span class="n">w</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">travelTimeRange</span><span class="p">)</span>

        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">'API Credit Used! - Travel: </span><span class="si">{</span><span class="n">travelTimeRange</span><span class="si">}</span><span class="s">'</span><span class="p">)</span>
        <span class="k">return</span><span class="p">(</span><span class="n">travelTimeRange</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
  <span class="n">e</span> <span class="o">=</span> <span class="n">eReader</span><span class="p">()</span>
  <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
    <span class="n">now</span> <span class="o">=</span> <span class="n">dt</span><span class="p">.</span><span class="n">now</span><span class="p">().</span><span class="n">strftime</span><span class="p">(</span><span class="s">'%H:%M:%S'</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="n">now</span><span class="p">)</span>
    <span class="n">weekNumber</span> <span class="o">=</span> <span class="n">dt</span><span class="p">.</span><span class="n">today</span><span class="p">().</span><span class="n">weekday</span><span class="p">()</span>

    <span class="k">if</span> <span class="n">weekNumber</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">now</span> <span class="o">&lt;</span> <span class="s">'08:00:00'</span><span class="p">:</span>
            <span class="n">e</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="n">display</span><span class="o">=</span><span class="s">'logo'</span><span class="p">)</span> 

        <span class="k">elif</span> <span class="n">now</span> <span class="o">&gt;</span> <span class="s">'09:00:00'</span> <span class="ow">and</span> <span class="n">now</span> <span class="o">&lt;</span> <span class="s">'09:15:00'</span><span class="p">:</span>
            <span class="n">e</span><span class="p">.</span><span class="n">getTravelTime</span><span class="p">()</span>
            <span class="n">e</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="n">display</span><span class="o">=</span><span class="s">'stats'</span><span class="p">)</span>
            <span class="n">os</span><span class="p">.</span><span class="n">system</span><span class="p">(</span><span class="sa">f</span><span class="s">'bash </span><span class="si">{</span><span class="n">e</span><span class="p">.</span><span class="n">gitterFilePath</span><span class="si">}</span><span class="s">gitter.sh &amp;'</span><span class="p">)</span>
            <span class="k">print</span><span class="p">(</span><span class="s">'Sleeping 900...'</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">debug</span> <span class="o">!=</span> <span class="bp">True</span><span class="p">:</span>
                <span class="n">time</span><span class="p">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">900</span><span class="p">)</span>

        <span class="c1">#elif now &gt; '10:30:00' and now &lt; '10:45:00':
</span>        <span class="c1">#    e.update(display='breaktime')
</span>        <span class="c1">#    print('First Break.')
</span>
        <span class="c1">#elif now &gt; '12:30:00' and now &lt; '13:00:00':
</span>        <span class="c1">#    e.update(display='breaktime')
</span>        <span class="c1">#    print('Lunch time.')
</span>
        <span class="c1">#elif now &gt; '14:30:00' and now &lt; '14:45:00':
</span>        <span class="c1">#    e.update(display='breaktime')
</span>        <span class="c1">#    print('Second Break.')
</span>
        <span class="k">elif</span> <span class="n">now</span> <span class="o">&gt;</span> <span class="s">'16:15:00'</span> <span class="ow">and</span> <span class="n">now</span> <span class="o">&lt;</span> <span class="s">'17:00:00'</span><span class="p">:</span>
            <span class="n">e</span><span class="p">.</span><span class="n">getTravelTime</span><span class="p">()</span>
            <span class="n">e</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="n">display</span><span class="o">=</span><span class="s">'stats'</span><span class="p">)</span>
            <span class="k">print</span><span class="p">(</span><span class="s">'Sleeping 500...'</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">debug</span> <span class="o">!=</span> <span class="bp">True</span><span class="p">:</span>
                <span class="n">time</span><span class="p">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">500</span><span class="p">)</span>
        
        <span class="c1">#elif now &gt; '17:00:00':
</span>        <span class="c1">#    e.update(display='logo')
</span>        
        <span class="k">else</span><span class="p">:</span>
            <span class="n">e</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="n">display</span><span class="o">=</span><span class="s">'stats'</span><span class="p">)</span>
            <span class="n">shutil</span><span class="p">.</span><span class="n">copyfile</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">e</span><span class="p">.</span><span class="n">filePath</span><span class="si">}{</span><span class="n">e</span><span class="p">.</span><span class="n">htmlOutputFile</span><span class="si">}</span><span class="s">'</span><span class="p">,</span> <span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">e</span><span class="p">.</span><span class="n">filePath</span><span class="si">}</span><span class="s">index.html'</span><span class="p">)</span>

    <span class="k">else</span><span class="p">:</span>
        <span class="n">e</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="n">display</span><span class="o">=</span><span class="s">'logo'</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">debug</span> <span class="o">==</span> <span class="bp">False</span><span class="p">:</span>
        <span class="c1">#print('Sleeping 150...')
</span>        <span class="c1">#time.sleep(150)
</span>        <span class="n">os</span><span class="p">.</span><span class="n">system</span><span class="p">(</span><span class="sa">f</span><span class="s">'bash </span><span class="si">{</span><span class="n">e</span><span class="p">.</span><span class="n">gitterFilePath</span><span class="si">}</span><span class="s">gitter.sh &amp;'</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'Sleeping 150...'</span><span class="p">)</span>
        <span class="n">time</span><span class="p">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">150</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">time</span><span class="p">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name>{&quot;name&quot;=&gt;nil, &quot;picture&quot;=&gt;nil, &quot;email&quot;=&gt;nil, &quot;twitter&quot;=&gt;nil, &quot;links&quot;=&gt;[{&quot;title&quot;=&gt;nil, &quot;url&quot;=&gt;nil, &quot;icon&quot;=&gt;nil}]}</name></author><category term="Screen" /><category term="API" /><category term="eInk" /><category term="GPIO" /><category term="Hardware" /><category term="Python" /><category term="Root" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Jellyfin Subtitle Extractor</title><link href="https://onthefritzz.com/jellyfin-subs/" rel="alternate" type="text/html" title="Jellyfin Subtitle Extractor" /><published>2024-01-13T00:00:00-06:00</published><updated>2024-01-13T00:00:00-06:00</updated><id>https://onthefritzz.com/jellyfin-subs</id><content type="html" xml:base="https://onthefritzz.com/jellyfin-subs/"><![CDATA[<ul>
  <li>Backup original file/folders containing subtitles</li>
  <li>Recursively search folders with random filenames for subtitle files</li>
  <li>Create a 2D array containing original filenames and file locations</li>
  <li>Create a 2D array from destination folders and standardized filenames of .SRTs</li>
  <li>Create directories with correct names for each subtitle file</li>
  <li>Rename and move original subtitle files to final folder destination</li>
</ul>

<p>Getting subtitles for Jellyfin isn’t a straight forward task. <a href="https://github.com/josdion/subbuzz">Subbuzz</a> plugin seems to be the easiest and quickest method for downloading subtitles in bulk but the settings have to be just right. There is <a href="https://www.bazarr.media/">Bazarr</a> but the installation/overhead is high. In either case, once you get em, you wanna keep em. Unfortunately, this is where they’re stored.</p>

<p><img src="/images/subtitle-tree.png" alt="image-center" /></p>

<p>Subtitles (at least via the Subbuzz method) are stored in the <code class="language-plaintext highlighter-rouge">/var/lib/jellyfin/metadata/library</code> directory but with a random alphanumeric file name structure. Luckily the .srt files are saved similarly to the original video filename they’re associated with. This makes them easier to sort. Here’s the end result.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">os</span><span class="p">,</span> <span class="n">shutil</span>
<span class="n">folderFileSrt</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">targetDestination</span> <span class="o">=</span> <span class="p">[]</span>

<span class="k">for</span> <span class="n">root</span><span class="p">,</span> <span class="n">dirs</span><span class="p">,</span> <span class="n">files</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="n">walk</span><span class="p">(</span><span class="s">'./'</span><span class="p">):</span>
    <span class="k">for</span> <span class="nb">file</span> <span class="ow">in</span> <span class="n">files</span><span class="p">:</span>
        <span class="k">if</span> <span class="s">'.srt'</span> <span class="ow">in</span> <span class="nb">file</span><span class="p">:</span>
            <span class="n">folderFile</span> <span class="o">=</span> <span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">root</span><span class="si">}</span><span class="s">\{file}'</span>
            <span class="n">folderFileSrt</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">folderFile</span><span class="p">)</span> <span class="c1"># Store array of [/folder1/file1.srt, folder2/file2.srt]
</span>
<span class="k">for</span> <span class="n">subtitle</span> <span class="ow">in</span> <span class="n">folderFileSrt</span><span class="p">:</span> <span class="c1"># For each found subtitle file...
</span>    <span class="n">outputFile</span> <span class="o">=</span> <span class="n">subtitle</span><span class="p">.</span><span class="n">replace</span><span class="p">(</span><span class="s">'.eng.srt'</span><span class="p">,</span> <span class="s">'.srt'</span><span class="p">)</span> <span class="c1"># remove cruff
</span>    <span class="n">outputFile</span> <span class="o">=</span> <span class="n">outputFile</span><span class="p">.</span><span class="n">replace</span><span class="p">(</span><span class="s">'.en.srt'</span><span class="p">,</span> <span class="s">'.srt'</span><span class="p">)</span> <span class="c1"># remove more cruff
</span>    <span class="n">outputFile</span> <span class="o">=</span> <span class="n">outputFile</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">'</span><span class="se">\\</span><span class="s">'</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="c1"># Get filename
</span>    <span class="n">outputFolder</span> <span class="o">=</span> <span class="n">outputFile</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">'.srt'</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> <span class="c1"># Get Folder name
</span>    <span class="n">fullOutput</span> <span class="o">=</span> <span class="sa">f</span><span class="s">'\{outputFolder}\{outputFile}'</span>
    <span class="n">targetDestination</span><span class="p">.</span><span class="n">append</span><span class="p">([</span><span class="n">subtitle</span><span class="p">,</span> <span class="n">fullOutput</span><span class="p">])</span> <span class="c1"># Create array with corrected subtitle filename and new output path
</span>
<span class="k">for</span> <span class="n">each</span> <span class="ow">in</span> <span class="n">targetDestination</span><span class="p">:</span> <span class="c1"># For each srt file
</span>    <span class="n">target</span><span class="p">,</span> <span class="n">destination</span> <span class="o">=</span> <span class="n">each</span>
    <span class="n">finalFileName</span> <span class="o">=</span> <span class="n">destination</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">'</span><span class="se">\\</span><span class="s">'</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="c1"># get raw filename
</span>
    <span class="n">destinationFolder</span> <span class="o">=</span> <span class="n">destination</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">'.srt'</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
    <span class="n">destinationFolder</span> <span class="o">=</span> <span class="n">destinationFolder</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">'</span><span class="se">\\</span><span class="s">'</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span> <span class="c1"># get raw folder name
</span>    <span class="n">destinationFolder</span> <span class="o">=</span> <span class="sa">f</span><span class="s">'./output/</span><span class="si">{</span><span class="n">destinationFolder</span><span class="si">}</span><span class="s">'</span> <span class="c1"># Create final destination folder
</span>
    <span class="n">os</span><span class="p">.</span><span class="n">mkdir</span><span class="p">(</span><span class="n">destinationFolder</span><span class="p">)</span> <span class="c1"># Create folder directory named after destination folders
</span>    <span class="n">shutil</span><span class="p">.</span><span class="n">move</span><span class="p">(</span><span class="n">target</span><span class="p">,</span> <span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">destinationFolder</span><span class="si">}</span><span class="s">/</span><span class="si">{</span><span class="n">finalFileName</span><span class="si">}</span><span class="s">'</span><span class="p">)</span> <span class="c1"># Move original filename to new location, as final filename
</span>
</code></pre></div></div>]]></content><author><name>{&quot;name&quot;=&gt;nil, &quot;picture&quot;=&gt;nil, &quot;email&quot;=&gt;nil, &quot;twitter&quot;=&gt;nil, &quot;links&quot;=&gt;[{&quot;title&quot;=&gt;nil, &quot;url&quot;=&gt;nil, &quot;icon&quot;=&gt;nil}]}</name></author><category term="JellyFin" /><summary type="html"><![CDATA[Backup original file/folders containing subtitles Recursively search folders with random filenames for subtitle files Create a 2D array containing original filenames and file locations Create a 2D array from destination folders and standardized filenames of .SRTs Create directories with correct names for each subtitle file Rename and move original subtitle files to final folder destination]]></summary></entry><entry><title type="html">NAS? NAH.</title><link href="https://onthefritzz.com/nas-nah/" rel="alternate" type="text/html" title="NAS? NAH." /><published>2024-01-04T00:00:00-06:00</published><updated>2024-01-04T00:00:00-06:00</updated><id>https://onthefritzz.com/nas-nah</id><content type="html" xml:base="https://onthefritzz.com/nas-nah/"><![CDATA[<p><img src="/images/newnasnaw.jpg" alt="no-alignment" /></p>

<p>Todays the day for upgrades. Been rocking a <a href="https://www.friendlyelec.com/index.php?route=product/product&amp;product_id=222">NanoPiNeo w/ NAS Hat</a> for many years. Pretty sure the all in cost was around $30. (See Left) It has been home to more than 3 drive upgrades. Countless SD card swaps. It has ran Jellyfin, Plex, PiHole, a CUPs server which took an unsorted grocery list, sorted it by aisle and printed the result to a thermal printer. See <a href="https://www.onthefritzz.com/googleNotesToThermal/">here</a>. However it’s become obsolete. My homelab now requires 1 gigabit speeds and this little guy tops out at 100mbps. Sufficient for a great many things but not all. Goodbye little fellow.</p>

<p>Hellow NUC. Rescued the little guy on the right awhile back. It’s an Intel NUC model NUC6i5SYH. It supports two drives over the Neo’s one, but most importantly supports gigabit. Perfect. Booted it up. Ran <code class="language-plaintext highlighter-rouge">curl https://repo.jellyfin.org/install-debuntu.sh | sudo bash</code> to install JellyFin and the rest is history.</p>

<p>Additionally, I disposed of any CAT 5 cable in sight. Upgraded from an Asus RT-AC1200 (10/100mbps) to an Asus RT-AX55 AX1800 (1Gb). There will be no noticeable difference to the speeds from our ISP since the older router supported our habits. However the new AX55 will be a welcomed upgrade when transferring data locally.</p>

<p>Lastly, my EDC Knife broke today. See <a href="https://www.onthefritzz.com/new-edc/">here</a>. That was about 2 years old. Used it every day and it never lost it’s edge. I immediately went out, purchased a new one. Which included a new inflation price. Swapped the belt clip and we are better than new.</p>

<p>New year, new… Nah!</p>]]></content><author><name>{&quot;name&quot;=&gt;nil, &quot;picture&quot;=&gt;nil, &quot;email&quot;=&gt;nil, &quot;twitter&quot;=&gt;nil, &quot;links&quot;=&gt;[{&quot;title&quot;=&gt;nil, &quot;url&quot;=&gt;nil, &quot;icon&quot;=&gt;nil}]}</name></author><category term="NAS" /><category term="JellyFin" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Bulk Convert PDFs into Optimized JPGs</title><link href="https://onthefritzz.com/bulk-convert-pdfs/" rel="alternate" type="text/html" title="Bulk Convert PDFs into Optimized JPGs" /><published>2023-09-25T00:00:00-05:00</published><updated>2023-09-25T00:00:00-05:00</updated><id>https://onthefritzz.com/bulk-convert-pdfs</id><content type="html" xml:base="https://onthefritzz.com/bulk-convert-pdfs/"><![CDATA[<ul>
  <li>Create a copy of database to test on</li>
  <li>Delete all files unrelated to task to avoid confusion</li>
  <li>Reduce file size of output jpgs
    <ul>
      <li>Remove extraneous images <em>inside</em> PDFs</li>
    </ul>
  </li>
  <li>Convert PDFs to JPGs
    <ul>
      <li>Each PDF page corresponds to 1x JPG</li>
      <li>Resulting in multiple JPGs per pdf</li>
      <li>Dynamically reduce/stitch all JPGS into one long JPG</li>
    </ul>
  </li>
  <li>Optimize final, stitched JPG to a degree that balances quality with filesize</li>
</ul>

<p>Been away for a while cuz I’ve been in learning mode. Been taking Udemy courses regarding App development with Ionic Capacitor amongst unrelated things. That is to say that a recent issue developed involving embedding PDFs into an Ionic app using React. Many attempts were made using a ton of libraries, external tools, etc… and while the Web App worked fine, the android version of the App would never display the PDFs. It would display jpgs just fine though. Time to convert 1000s of PDFs into JPGs.
<br />
<br />
However, it turns out that a 1:1 PDF:JPG is significantly larger in size. That is; 3GB as opposed to 349MB. A 3GB app is out of the question. The script below takes thousands of PDFs and outputs an optimized JPG for each. It could use some refactoring but it’s also a one off script so that’s never gunna happen. It just needs to work. End result is a collective filesize coming in at 228MB. Which comes out to a 34% reduction in size for the app. The fact that the it all became smaller is a nice surprise.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">pdf2image</span> <span class="kn">import</span> <span class="n">convert_from_path</span>
<span class="kn">from</span> <span class="nn">PIL</span> <span class="kn">import</span> <span class="n">Image</span>
<span class="kn">import</span> <span class="nn">fitz</span><span class="p">,</span> <span class="n">cv2</span><span class="p">,</span> <span class="n">os</span><span class="p">,</span> <span class="n">re</span>

<span class="n">__rootDir</span> <span class="o">=</span> <span class="s">'.</span><span class="se">\\</span><span class="s">recipes'</span>
<span class="n">__ppi</span> <span class="o">=</span> <span class="mi">400</span>
<span class="n">__optimizeQualality</span> <span class="o">=</span> <span class="mi">50</span>

<span class="k">def</span> <span class="nf">deleteAll</span><span class="p">(</span><span class="n">fileFormat</span><span class="p">):</span> <span class="c1">#Delete Main image JPGs to avoid confusion with Stitched JPGs. ie: Run once.
</span>    <span class="k">for</span> <span class="n">root</span><span class="p">,</span> <span class="n">dirs</span><span class="p">,</span> <span class="n">files</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="n">walk</span><span class="p">(</span><span class="n">__rootDir</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">oneFile</span> <span class="ow">in</span> <span class="n">files</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">fileFormat</span> <span class="ow">in</span> <span class="n">oneFile</span><span class="p">:</span>
                <span class="k">print</span><span class="p">(</span><span class="s">'Deleting... '</span><span class="p">,</span> <span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">root</span><span class="si">}</span><span class="s">\{oneFile}'</span><span class="p">)</span>
                <span class="n">os</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">root</span><span class="si">}</span><span class="s">\{oneFile}'</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">removeImageFromPDFs</span><span class="p">():</span> <span class="c1"># Remove images from pdfs
</span>    <span class="k">def</span> <span class="nf">remove_images</span><span class="p">(</span><span class="n">input_pdf</span><span class="p">,</span> <span class="n">output_pdf</span><span class="p">):</span>
        <span class="n">doc</span> <span class="o">=</span> <span class="n">fitz</span><span class="p">.</span><span class="nb">open</span><span class="p">(</span><span class="n">input_pdf</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">page</span> <span class="ow">in</span> <span class="n">doc</span><span class="p">:</span>
            <span class="n">img_list</span> <span class="o">=</span> <span class="n">page</span><span class="p">.</span><span class="n">get_images</span><span class="p">()</span>
            <span class="k">for</span> <span class="n">img</span> <span class="ow">in</span> <span class="n">img_list</span><span class="p">:</span>
                <span class="n">page</span><span class="p">.</span><span class="n">delete_image</span><span class="p">(</span><span class="n">img</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>

        <span class="n">doc</span><span class="p">.</span><span class="n">save</span><span class="p">(</span><span class="n">output_pdf</span><span class="p">)</span>

    <span class="k">for</span> <span class="n">root</span><span class="p">,</span> <span class="n">dirs</span><span class="p">,</span> <span class="n">files</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="n">walk</span><span class="p">(</span><span class="n">__rootDir</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">pdf</span> <span class="ow">in</span> <span class="n">files</span><span class="p">:</span>
            <span class="k">if</span> <span class="s">'.pdf'</span> <span class="ow">in</span> <span class="n">pdf</span><span class="p">:</span>
                <span class="n">fileName</span> <span class="o">=</span> <span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">root</span><span class="si">}</span><span class="s">\{pdf}'</span>
                <span class="n">outputFileName</span> <span class="o">=</span> <span class="n">fileName</span><span class="p">.</span><span class="n">replace</span><span class="p">(</span><span class="s">'.pdf'</span><span class="p">,</span> <span class="s">'-noimage.pdf'</span><span class="p">)</span>
                <span class="k">print</span><span class="p">(</span><span class="s">'Removing images from pdf...'</span><span class="p">,</span> <span class="n">fileName</span><span class="p">)</span>
                <span class="n">remove_images</span><span class="p">(</span><span class="n">fileName</span><span class="p">,</span> <span class="n">outputFileName</span><span class="p">)</span>
                <span class="n">os</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="n">fileName</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">convertPDFsIntoJPGs</span><span class="p">():</span>
    <span class="k">for</span> <span class="n">root</span><span class="p">,</span> <span class="n">dirs</span><span class="p">,</span> <span class="n">files</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="n">walk</span><span class="p">(</span><span class="n">__rootDir</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">pics</span> <span class="ow">in</span> <span class="n">files</span><span class="p">:</span>
            <span class="k">if</span> <span class="s">'.pdf'</span> <span class="ow">in</span> <span class="n">pics</span><span class="p">:</span>
                <span class="n">jpgName</span> <span class="o">=</span> <span class="n">pics</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">'</span><span class="se">\\</span><span class="s">'</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="n">replace</span><span class="p">(</span><span class="s">'.pdf'</span><span class="p">,</span> <span class="s">''</span><span class="p">)</span>
                <span class="n">jpgName</span> <span class="o">=</span> <span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">jpgName</span><span class="si">}</span><span class="s">-stitched'</span>

                <span class="n">pages</span> <span class="o">=</span> <span class="n">convert_from_path</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">root</span><span class="si">}</span><span class="s">\{pics}'</span><span class="p">,</span> <span class="n">__ppi</span><span class="p">)</span>
                <span class="k">for</span> <span class="n">count</span><span class="p">,</span> <span class="n">page</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">pages</span><span class="p">):</span>
                    <span class="n">page</span><span class="p">.</span><span class="n">save</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">root</span><span class="si">}</span><span class="s">\{jpgName}-</span><span class="si">{</span><span class="n">count</span><span class="si">}</span><span class="s">.jpg'</span><span class="p">,</span> <span class="s">'JPEG'</span><span class="p">)</span>
                    <span class="k">print</span><span class="p">(</span><span class="s">'Converting PDF into JPG...'</span><span class="p">,</span> <span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">root</span><span class="si">}</span><span class="s">\{jpgName}-</span><span class="si">{</span><span class="n">count</span><span class="si">}</span><span class="s">.jpg'</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">verticallyStitchJPGs</span><span class="p">():</span>
    <span class="k">for</span> <span class="n">root</span><span class="p">,</span> <span class="n">dirs</span><span class="p">,</span> <span class="n">files</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="n">walk</span><span class="p">(</span><span class="n">__rootDir</span><span class="p">):</span>
        <span class="n">imgReads</span> <span class="o">=</span> <span class="p">{</span><span class="s">"filePath"</span><span class="p">:</span> <span class="s">''</span><span class="p">,</span> <span class="s">"jpgFiles"</span><span class="p">:</span> <span class="p">[],</span> <span class="s">"deleteImgs"</span><span class="p">:</span> <span class="p">[]}</span>
        
        <span class="k">for</span> <span class="n">pics</span> <span class="ow">in</span> <span class="n">files</span><span class="p">:</span>
            <span class="n">inputFilePath</span> <span class="o">=</span> <span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">root</span><span class="si">}</span><span class="s">\{pics}'</span>
            <span class="n">outputFilePath</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="n">sub</span><span class="p">(</span><span class="s">'-\d'</span><span class="p">,</span> <span class="s">''</span><span class="p">,</span> <span class="n">inputFilePath</span><span class="p">).</span><span class="n">replace</span><span class="p">(</span><span class="s">'.jpg'</span><span class="p">,</span> <span class="s">'-final.jpg'</span><span class="p">)</span>
            <span class="n">imgReads</span><span class="p">[</span><span class="s">"filePath"</span><span class="p">]</span> <span class="o">=</span> <span class="n">outputFilePath</span>
            <span class="n">imgToMemory</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">imread</span><span class="p">(</span><span class="n">inputFilePath</span><span class="p">)</span>
            <span class="n">imgReads</span><span class="p">[</span><span class="s">"deleteImgs"</span><span class="p">].</span><span class="n">append</span><span class="p">(</span><span class="n">inputFilePath</span><span class="p">)</span>
            <span class="n">imgReads</span><span class="p">[</span><span class="s">"jpgFiles"</span><span class="p">].</span><span class="n">append</span><span class="p">(</span><span class="n">imgToMemory</span><span class="p">)</span>

        <span class="k">print</span><span class="p">(</span><span class="n">imgReads</span><span class="p">[</span><span class="s">"filePath"</span><span class="p">],</span> <span class="nb">len</span><span class="p">(</span><span class="n">imgReads</span><span class="p">[</span><span class="s">'jpgFiles'</span><span class="p">]))</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">imgReads</span><span class="p">[</span><span class="s">"jpgFiles"</span><span class="p">])</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">concatImage</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">vconcat</span><span class="p">(</span><span class="n">imgReads</span><span class="p">[</span><span class="s">"jpgFiles"</span><span class="p">])</span>
            <span class="n">cv2</span><span class="p">.</span><span class="n">imwrite</span><span class="p">(</span><span class="n">imgReads</span><span class="p">[</span><span class="s">"filePath"</span><span class="p">],</span> <span class="n">concatImage</span><span class="p">)</span>

        <span class="k">for</span> <span class="n">nonStitchedPics</span> <span class="ow">in</span> <span class="n">imgReads</span><span class="p">[</span><span class="s">"deleteImgs"</span><span class="p">]:</span>
            <span class="n">os</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="n">nonStitchedPics</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">finalOptimizedJPG</span><span class="p">():</span>
    <span class="k">for</span> <span class="n">root</span><span class="p">,</span> <span class="n">dirs</span><span class="p">,</span> <span class="n">files</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="n">walk</span><span class="p">(</span><span class="n">__rootDir</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">pic</span> <span class="ow">in</span> <span class="n">files</span><span class="p">:</span>
            <span class="n">inputFile</span> <span class="o">=</span> <span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">root</span><span class="si">}</span><span class="s">\{pic}'</span>
            <span class="n">imgInMemory</span> <span class="o">=</span> <span class="n">Image</span><span class="p">.</span><span class="nb">open</span><span class="p">(</span><span class="n">inputFile</span><span class="p">)</span>
            <span class="n">outputFile</span> <span class="o">=</span> <span class="n">inputFile</span><span class="p">.</span><span class="n">replace</span><span class="p">(</span><span class="s">'-final.jpg'</span><span class="p">,</span> <span class="s">'-final-optimized.jpg'</span><span class="p">)</span>
            <span class="n">imgInMemory</span><span class="p">.</span><span class="n">save</span><span class="p">(</span><span class="n">outputFile</span><span class="p">,</span> <span class="n">optimize</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">quality</span><span class="o">=</span><span class="n">__optimizeQualality</span><span class="p">)</span>
            <span class="k">print</span><span class="p">(</span><span class="s">'Optimizing final JPG... '</span><span class="p">,</span> <span class="n">outputFile</span><span class="p">,</span> <span class="s">'Deleting: '</span><span class="p">,</span> <span class="n">inputFile</span><span class="p">)</span>
            <span class="n">os</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="n">inputFile</span><span class="p">)</span>

<span class="n">deleteAll</span><span class="p">(</span><span class="s">'.json'</span><span class="p">)</span>
<span class="n">deleteAll</span><span class="p">(</span><span class="s">'.jpg'</span><span class="p">)</span>
<span class="n">removeImageFromPDFs</span><span class="p">()</span>
<span class="n">convertPDFsIntoJPGs</span><span class="p">()</span>
<span class="n">deleteAll</span><span class="p">(</span><span class="s">'.pdf'</span><span class="p">)</span>
<span class="n">verticallyStitchJPGs</span><span class="p">()</span>
<span class="n">finalOptimizedJPG</span><span class="p">()</span>
</code></pre></div></div>]]></content><author><name>{&quot;name&quot;=&gt;nil, &quot;picture&quot;=&gt;nil, &quot;email&quot;=&gt;nil, &quot;twitter&quot;=&gt;nil, &quot;links&quot;=&gt;[{&quot;title&quot;=&gt;nil, &quot;url&quot;=&gt;nil, &quot;icon&quot;=&gt;nil}]}</name></author><category term="Python" /><category term="Automation" /><summary type="html"><![CDATA[Create a copy of database to test on Delete all files unrelated to task to avoid confusion Reduce file size of output jpgs Remove extraneous images inside PDFs Convert PDFs to JPGs Each PDF page corresponds to 1x JPG Resulting in multiple JPGs per pdf Dynamically reduce/stitch all JPGS into one long JPG Optimize final, stitched JPG to a degree that balances quality with filesize]]></summary></entry><entry><title type="html">Zzz….</title><link href="https://onthefritzz.com/sleeper/" rel="alternate" type="text/html" title="Zzz…." /><published>2023-08-04T00:00:00-05:00</published><updated>2023-08-04T00:00:00-05:00</updated><id>https://onthefritzz.com/sleeper</id><content type="html" xml:base="https://onthefritzz.com/sleeper/"><![CDATA[<table>
  <thead>
    <tr>
      <th>Part</th>
      <th>Model</th>
      <th>Cost</th>
      <th>Value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>CPU</td>
      <td>Ryzen 5 1400</td>
      <td>$0.00</td>
      <td>$110.00</td>
    </tr>
    <tr>
      <td>GPU</td>
      <td>RTX 3060</td>
      <td>$0.00</td>
      <td>$299.99</td>
    </tr>
    <tr>
      <td>MOBO</td>
      <td>MSI Bazook B350M</td>
      <td>$0.00</td>
      <td>$149.99</td>
    </tr>
    <tr>
      <td>RAM</td>
      <td>32GB DDR4</td>
      <td>$0.00</td>
      <td>$59.99</td>
    </tr>
    <tr>
      <td>1TB NVMe SSD</td>
      <td>-</td>
      <td>$0.00</td>
      <td>$39.99</td>
    </tr>
    <tr>
      <td>8TB HDDs (4x2TB)*</td>
      <td>WD20EZAZ</td>
      <td>$0.00</td>
      <td>$224.99</td>
    </tr>
    <tr>
      <td>Case</td>
      <td>-</td>
      <td>$0.00</td>
      <td>$89.99</td>
    </tr>
    <tr>
      <td>5.25in to 3.5in HDD Adapter (x4)</td>
      <td>-</td>
      <td>$27.16</td>
      <td>$27.16</td>
    </tr>
    <tr>
      <td>RGB 92mm Fans (x2)</td>
      <td>-</td>
      <td>$25.90</td>
      <td>$25.90</td>
    </tr>
    <tr>
      <td>Thermal Paste</td>
      <td>-</td>
      <td>$8.97</td>
      <td>$8.97</td>
    </tr>
    <tr>
      <td>Rubber Mouting Screws (x12)</td>
      <td>-</td>
      <td>$5.89</td>
      <td>$5.89</td>
    </tr>
    <tr>
      <td>Total</td>
      <td>-</td>
      <td>$67.92</td>
      <td>$1042.86</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>The HDDs are ~1 year old and from an older RAID project. The RAID is now incorporated into the desktop so their cost isn’t considered as part of the build. Not to mentioned, they could have been free if required.</li>
</ul>

<p>Cheapest custom build ever? Prolly not, but it’s quite a steal. Never judge a book by it’s cover.
Special appreciation to B.L.D.Z.R.</p>

<p><img src="/images/sleeper-off.jpg" class="align-center" alt="" />
<br />
<img src="/images/sleeper-on.jpg" class="align-center" alt="" /></p>]]></content><author><name>{&quot;name&quot;=&gt;nil, &quot;picture&quot;=&gt;nil, &quot;email&quot;=&gt;nil, &quot;twitter&quot;=&gt;nil, &quot;links&quot;=&gt;[{&quot;title&quot;=&gt;nil, &quot;url&quot;=&gt;nil, &quot;icon&quot;=&gt;nil}]}</name></author><category term="Sleeper" /><category term="Hardware" /><summary type="html"><![CDATA[Part Model Cost Value CPU Ryzen 5 1400 $0.00 $110.00 GPU RTX 3060 $0.00 $299.99 MOBO MSI Bazook B350M $0.00 $149.99 RAM 32GB DDR4 $0.00 $59.99 1TB NVMe SSD - $0.00 $39.99 8TB HDDs (4x2TB)* WD20EZAZ $0.00 $224.99 Case - $0.00 $89.99 5.25in to 3.5in HDD Adapter (x4) - $27.16 $27.16 RGB 92mm Fans (x2) - $25.90 $25.90 Thermal Paste - $8.97 $8.97 Rubber Mouting Screws (x12) - $5.89 $5.89 Total - $67.92 $1042.86]]></summary></entry><entry><title type="html">Sticky situation</title><link href="https://onthefritzz.com/sticky-controller/" rel="alternate" type="text/html" title="Sticky situation" /><published>2023-04-30T00:00:00-05:00</published><updated>2023-04-30T00:00:00-05:00</updated><id>https://onthefritzz.com/sticky-controller</id><content type="html" xml:base="https://onthefritzz.com/sticky-controller/"><![CDATA[<p><img src="/images/xbox-one-exploded-controller.jpg" class="align-center" alt="" />
<br />
Pretty straight forward. Someone got the ‘B’ button sticky. Take apart, clean with isopropol alcohol. Put back together. Done.
<br />
<br />
Interesting note is that the ‘B’ button is actually more accessible than the other 3 action buttons. ‘B’ is accessible after dissassembling the main housing components, whereas the other 3 buttons require internal components/boards to be removed from each other.</p>]]></content><author><name>{&quot;name&quot;=&gt;nil, &quot;picture&quot;=&gt;nil, &quot;email&quot;=&gt;nil, &quot;twitter&quot;=&gt;nil, &quot;links&quot;=&gt;[{&quot;title&quot;=&gt;nil, &quot;url&quot;=&gt;nil, &quot;icon&quot;=&gt;nil}]}</name></author><category term="Xbox" /><category term="Hardware" /><category term="Refurbish" /><summary type="html"><![CDATA[Pretty straight forward. Someone got the ‘B’ button sticky. Take apart, clean with isopropol alcohol. Put back together. Done. Interesting note is that the ‘B’ button is actually more accessible than the other 3 action buttons. ‘B’ is accessible after dissassembling the main housing components, whereas the other 3 buttons require internal components/boards to be removed from each other.]]></summary></entry><entry><title type="html">Reducing Xbox One S Load Times</title><link href="https://onthefritzz.com/xbox-ssd-upgrade/" rel="alternate" type="text/html" title="Reducing Xbox One S Load Times" /><published>2023-04-15T00:00:00-05:00</published><updated>2023-04-15T00:00:00-05:00</updated><id>https://onthefritzz.com/xbox-ssd-upgrade</id><content type="html" xml:base="https://onthefritzz.com/xbox-ssd-upgrade/"><![CDATA[<p><img src="/images/xbox-one-s.jpg" class="align-center" alt="" /></p>

<table>
  <thead>
    <tr>
      <th>Process</th>
      <th>HDD (sec)</th>
      <th>SSD (sec)</th>
      <th>Net (sec)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Boot To Home - #1</td>
      <td>54.68</td>
      <td>54.35</td>
      <td><strike>-0.33</strike></td>
    </tr>
    <tr>
      <td>Boot To Home - #2</td>
      <td>58.79</td>
      <td>54.12</td>
      <td><strike>-4.67</strike></td>
    </tr>
    <tr>
      <td>Home To Spyro Start Page - #1</td>
      <td>73.18</td>
      <td>56.27</td>
      <td>-16.91</td>
    </tr>
    <tr>
      <td>Home To Spyro Start Page - #2</td>
      <td>77.19</td>
      <td>47.09</td>
      <td>-30.10</td>
    </tr>
    <tr>
      <td>Spyro Start To Gameplay - #1</td>
      <td>38.82</td>
      <td>30.13</td>
      <td>-8.69</td>
    </tr>
    <tr>
      <td>Spyro Start To Gameplay - #2</td>
      <td>38.90</td>
      <td>22.04</td>
      <td>-16.86</td>
    </tr>
    <tr>
      <td>Home To Dredge Start Page - #1</td>
      <td>76.67</td>
      <td>34.88</td>
      <td>-41.79</td>
    </tr>
  </tbody>
</table>

<p>Noticed that when getting a gameover in some games the reloading or ‘continue’ process takes just an extra tick longer than expected. If this happens a couple times in a row, the load time is just insult to injury. So it’s time for an SSD.</p>

<p>The old 500GB platter drive was cloned with Clonezilla using the ‘expert’ default prompts with -k1 flag. This expanded the imaged partitions to make better use of the slightly bigger, 512GB SSD.</p>

<p><img src="/images/xbox-one-s-clonezilla.jpg" class="align-center" alt="" /></p>

<p>Then we put it back together.</p>

<p><img src="/images/xbox-one-s-done.jpg" class="align-center" alt="" /></p>

<p>Cloning was an excellent solution as I’ve reached the maximum number of account/console transfers allowed with GamePass. This way all games, accounts, passwords, etc… remain intact and I don’t have to fuss with the paid GamePass subscription becoming unusable.</p>

<p>All in all:</p>
<ul>
  <li>Average savings is 22 seconds per action</li>
  <li>~45 seconds saved per game</li>
  <li>Load times after a gameover feel much more transitory</li>
  <li>Over 18 emails and passwords required absolutey <strong>zero</strong> setup</li>
  <li>The ‘Boot To Home’ times are not included because there really wasn’t a noticeable difference
    <ul>
      <li>Indicating everything leading up to the home page on power up is BIOS/ROM/Embedded and unrelated to storage load times.</li>
    </ul>
  </li>
</ul>]]></content><author><name>{&quot;name&quot;=&gt;nil, &quot;picture&quot;=&gt;nil, &quot;email&quot;=&gt;nil, &quot;twitter&quot;=&gt;nil, &quot;links&quot;=&gt;[{&quot;title&quot;=&gt;nil, &quot;url&quot;=&gt;nil, &quot;icon&quot;=&gt;nil}]}</name></author><category term="Xbox" /><category term="Hardware" /><category term="Refurbish" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Webscraping Healthy Recipes</title><link href="https://onthefritzz.com/webscraping-healthy-recipes/" rel="alternate" type="text/html" title="Webscraping Healthy Recipes" /><published>2023-03-29T00:00:00-05:00</published><updated>2023-03-29T00:00:00-05:00</updated><id>https://onthefritzz.com/webscraping-healthy-recipes</id><content type="html" xml:base="https://onthefritzz.com/webscraping-healthy-recipes/"><![CDATA[<ul>
  <li>Another recipe scraper!</li>
  <li>Killed ~5103 ads</li>
  <li>Added 500+ recipes to my collection</li>
  <li>Same format as usual for scraping recipes
    <ul>
      <li>Get links corresponding to each food category</li>
      <li>Get total amount of pages for each category</li>
      <li>Get header, picture, pdf, etc.. of each recipes occuring on each page</li>
    </ul>
  </li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">scrapy</span><span class="p">,</span> <span class="n">logging</span><span class="p">,</span> <span class="n">time</span><span class="p">,</span> <span class="n">json</span><span class="p">,</span> <span class="n">re</span><span class="p">,</span> <span class="n">os</span>
<span class="kn">import</span> <span class="nn">requests</span><span class="p">,</span> <span class="n">pdfkit</span><span class="p">,</span> <span class="n">unidecode</span>
<span class="kn">from</span> <span class="nn">scrapy.crawler</span> <span class="kn">import</span> <span class="n">CrawlerProcess</span>
<span class="kn">from</span> <span class="nn">scrapy</span> <span class="kn">import</span> <span class="n">Selector</span>
<span class="kn">from</span> <span class="nn">pprint</span> <span class="kn">import</span> <span class="n">pprint</span>

<span class="k">class</span> <span class="nc">sallySpider</span><span class="p">(</span><span class="n">scrapy</span><span class="p">.</span><span class="n">Spider</span><span class="p">):</span>
  <span class="s">"""Collect food recipes without the abhorrently excessive ads and life stories
  Will crawl any site that is formatted as follows (with minor tweaking).
  Category drop down/url suffixs. Grab all links for every page in pagination footer. Get header, picture and card (to pdf) download."""</span>
  <span class="n">name</span> <span class="o">=</span> <span class="s">'healthy-nommer'</span>
  <span class="n">outputFolder</span> <span class="o">=</span> <span class="s">'healthy-database'</span>
  <span class="n">start_urls</span> <span class="o">=</span> <span class="p">[</span><span class="s">'https://healthyrecipesblogs.com'</span><span class="p">]</span>
  <span class="n">logging</span><span class="p">.</span><span class="n">getLogger</span><span class="p">(</span><span class="s">'scrapy'</span><span class="p">).</span><span class="n">propagate</span> <span class="o">=</span> <span class="bp">False</span> <span class="c1"># No Excessive Log
</span>  <span class="n">custom_settings</span> <span class="o">=</span> <span class="p">{</span><span class="s">'LOG_LEVEL'</span><span class="p">:</span> <span class="s">'ERROR'</span><span class="p">}</span>
  <span class="n">convertPdfPath</span> <span class="o">=</span> <span class="sa">r</span><span class="s">'C:\Program Files\wkhtmltopdf\bin\wkhtmltopdf.exe'</span> <span class="c1"># force path for html to pdf bin
</span>  <span class="n">config</span> <span class="o">=</span> <span class="n">pdfkit</span><span class="p">.</span><span class="n">configuration</span><span class="p">(</span><span class="n">wkhtmltopdf</span><span class="o">=</span><span class="n">convertPdfPath</span><span class="p">)</span>
  <span class="n">articlesGrabbed</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="n">articleOn</span> <span class="o">=</span> <span class="mi">0</span>

  <span class="k">def</span> <span class="nf">start_requests</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span> <span class="c1"># Scrape several food category urls
</span>    <span class="n">urlSuffix</span> <span class="o">=</span> <span class="p">[</span><span class="s">'meat-recipes'</span><span class="p">,</span> <span class="s">'chicken-recipes'</span><span class="p">,</span> <span class="s">'seafood-recipes'</span><span class="p">,</span> <span class="s">'casserole-recipes'</span><span class="p">,</span>
          <span class="s">'vegetable-recipes'</span><span class="p">,</span> <span class="s">'side-dishes'</span><span class="p">,</span> <span class="s">'dips-dressings-sauces'</span><span class="p">,</span> <span class="s">'healthy-appetizers'</span><span class="p">,</span>
          <span class="s">'healthy-snack-recipes'</span><span class="p">,</span> <span class="s">'healthy-pizza-recipes'</span><span class="p">,</span> <span class="s">'soup-recipes'</span><span class="p">,</span>
          <span class="s">'healthy-breakfast-recipes'</span><span class="p">,</span> <span class="s">'healthy-desserts'</span><span class="p">,</span> <span class="s">'gluten-free-bread-recipes'</span><span class="p">]</span> <span class="c1"># 'meat-recipes'
</span>
    <span class="n">urls</span> <span class="o">=</span> <span class="p">[</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">start_urls</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="si">}</span><span class="s">/category/</span><span class="si">{</span><span class="n">x</span><span class="si">}</span><span class="s">'</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">urlSuffix</span><span class="p">]</span> <span class="c1"># List of full URLs, domain + category
</span>    <span class="k">for</span> <span class="n">url</span> <span class="ow">in</span> <span class="n">urls</span><span class="p">:</span> <span class="c1"># For each url/category, run pagination function
</span>      <span class="n">category</span> <span class="o">=</span> <span class="n">url</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">'/'</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
      <span class="k">yield</span> <span class="n">scrapy</span><span class="p">.</span><span class="n">Request</span><span class="p">(</span><span class="n">url</span><span class="o">=</span><span class="n">url</span><span class="p">,</span> <span class="n">callback</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">getAllCategoryPages</span><span class="p">,</span> <span class="n">cb_kwargs</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">category</span><span class="o">=</span><span class="n">category</span><span class="p">))</span> <span class="c1"># Carry category as function
</span>  
  <span class="k">def</span> <span class="nf">getAllCategoryPages</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">response</span><span class="p">,</span> <span class="n">category</span><span class="p">):</span> <span class="c1"># Get highest 'page number' from bottom of category page
</span>    <span class="n">categoryUrls</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">page</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">):</span> <span class="c1"># Al dente code. There is no category that has more than 3 pages. There is no go to 'last' page button
</span>      <span class="k">if</span> <span class="n">page</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span> <span class="c1"># If first page, use 0 page instead of 1, which doesn't work
</span>        <span class="n">categoryUrls</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">response</span><span class="p">.</span><span class="n">url</span><span class="si">}</span><span class="s">page/0'</span><span class="p">)</span>
      <span class="k">else</span><span class="p">:</span>
        <span class="n">categoryUrls</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">response</span><span class="p">.</span><span class="n">url</span><span class="si">}</span><span class="s">page/</span><span class="si">{</span><span class="n">page</span><span class="si">}</span><span class="s">'</span><span class="p">)</span>

    <span class="k">for</span> <span class="n">url</span> <span class="ow">in</span> <span class="n">categoryUrls</span><span class="p">:</span>
      <span class="k">yield</span> <span class="n">scrapy</span><span class="p">.</span><span class="n">Request</span><span class="p">(</span><span class="n">url</span><span class="o">=</span><span class="n">url</span><span class="p">,</span> <span class="n">callback</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">parse</span><span class="p">,</span> <span class="n">cb_kwargs</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">category</span><span class="o">=</span><span class="n">category</span><span class="p">))</span>
  
  <span class="k">def</span> <span class="nf">parse</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">response</span><span class="p">,</span> <span class="n">category</span><span class="p">):</span>
    <span class="n">recipes</span> <span class="o">=</span> <span class="n">response</span><span class="p">.</span><span class="n">xpath</span><span class="p">(</span><span class="s">'//div[@class="feast-category-index  feast-recipe-index"]'</span><span class="p">).</span><span class="n">getall</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span> <span class="c1"># Only get main category recipes, not side bar recommendations [1]
</span>    <span class="n">recipeHtmlString</span> <span class="o">=</span> <span class="n">Selector</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">recipes</span><span class="p">)</span> <span class="c1"># Convert .getall() string back into parseable xpath
</span>    <span class="n">recipeUrls</span> <span class="o">=</span> <span class="n">recipeHtmlString</span><span class="p">.</span><span class="n">xpath</span><span class="p">(</span><span class="s">'//li[@class="listing-item"]/a/@href'</span><span class="p">).</span><span class="n">getall</span><span class="p">()</span>
    
    <span class="k">for</span> <span class="n">url</span> <span class="ow">in</span> <span class="n">recipeUrls</span><span class="p">:</span>
      <span class="bp">self</span><span class="p">.</span><span class="n">articlesGrabbed</span> <span class="o">+=</span> <span class="mi">1</span>
      <span class="k">yield</span> <span class="n">scrapy</span><span class="p">.</span><span class="n">Request</span><span class="p">(</span><span class="n">url</span><span class="o">=</span><span class="n">url</span><span class="p">,</span> <span class="n">callback</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">recursiveParse</span><span class="p">,</span> <span class="n">cb_kwargs</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">category</span><span class="o">=</span><span class="n">category</span><span class="p">))</span>

  <span class="k">def</span> <span class="nf">recursiveParse</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">response</span><span class="p">,</span> <span class="n">category</span><span class="p">):</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">articleOn</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="n">name</span> <span class="o">=</span> <span class="n">response</span><span class="p">.</span><span class="n">xpath</span><span class="p">(</span><span class="s">'//h1[@class="entry-title"]/text()'</span><span class="p">).</span><span class="n">get</span><span class="p">()</span>
    <span class="n">name</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="n">sub</span><span class="p">(</span><span class="sa">r</span><span class="s">'[^a-zA-Z0-9\s]+'</span><span class="p">,</span> <span class="s">''</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>
    <span class="n">name</span> <span class="o">=</span> <span class="n">name</span><span class="p">.</span><span class="n">replace</span><span class="p">(</span><span class="s">'  '</span><span class="p">,</span> <span class="s">' '</span><span class="p">)</span>
    
    <span class="n">mainImage</span> <span class="o">=</span> <span class="n">response</span><span class="p">.</span><span class="n">xpath</span><span class="p">(</span><span class="s">'//figure/img/@src'</span><span class="p">).</span><span class="n">get</span><span class="p">()</span>
    <span class="n">recipeCardUrl</span> <span class="o">=</span> <span class="n">response</span><span class="p">.</span><span class="n">xpath</span><span class="p">(</span><span class="s">'//div[@class="wprm-container-float-right"]/a/@href'</span><span class="p">).</span><span class="n">getall</span><span class="p">()[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="c1"># If recipe card doesn't exist, scrapy errors but moves on. Page likely cooking tip, utensil/accessory desccription
</span>    <span class="n">recipeID</span> <span class="o">=</span> <span class="n">recipeCardUrl</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">'/'</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>

    <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">'Article: </span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">articleOn</span><span class="si">}</span><span class="s">/</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">articlesGrabbed</span><span class="si">}</span><span class="s">, </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s">, </span><span class="si">{</span><span class="n">category</span><span class="si">}</span><span class="s">, </span><span class="si">{</span><span class="n">response</span><span class="p">.</span><span class="n">url</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">"/"</span><span class="p">)[</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span><span class="si">}</span><span class="s">'</span><span class="p">)</span>

    <span class="n">recipeJson</span> <span class="o">=</span> <span class="p">{</span>
      <span class="s">'url'</span><span class="p">:</span> <span class="n">response</span><span class="p">.</span><span class="n">url</span><span class="p">,</span>
      <span class="s">'name'</span><span class="p">:</span> <span class="n">name</span><span class="p">,</span>
      <span class="s">'image'</span><span class="p">:</span> <span class="n">mainImage</span><span class="p">,</span>
      <span class="s">'id'</span><span class="p">:</span> <span class="n">recipeID</span><span class="p">,</span>
      <span class="s">'category'</span><span class="p">:</span> <span class="n">category</span><span class="p">,</span>
      <span class="s">'card'</span><span class="p">:</span> <span class="n">recipeCardUrl</span>
    <span class="p">}</span>
    
    <span class="n">filename</span> <span class="o">=</span> <span class="n">name</span><span class="p">.</span><span class="n">replace</span><span class="p">(</span><span class="s">" "</span><span class="p">,</span> <span class="s">"-"</span><span class="p">).</span><span class="n">lower</span><span class="p">()</span> <span class="c1"># Format header into lowercase, dash seperated for file naming
</span>    <span class="n">nestedFolder</span> <span class="o">=</span> <span class="sa">f</span><span class="s">'.</span><span class="se">\\</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">outputFolder</span><span class="si">}</span><span class="se">\\</span><span class="si">{</span><span class="n">category</span><span class="si">}</span><span class="se">\\</span><span class="si">{</span><span class="n">filename</span><span class="si">}</span><span class="se">\\</span><span class="s">'</span> <span class="c1"># Nest a folder named 'Recipe' within folder name of 'Category'
</span>    
    <span class="k">try</span><span class="p">:</span>
      <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">exists</span><span class="p">(</span><span class="n">nestedFolder</span><span class="p">):</span> <span class="c1"># If \Category\Recipe folder doesn't exist...
</span>        <span class="n">os</span><span class="p">.</span><span class="n">makedirs</span><span class="p">(</span><span class="n">nestedFolder</span><span class="p">)</span> <span class="c1"># make it
</span>        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">nestedFolder</span><span class="si">}{</span><span class="n">filename</span><span class="si">}</span><span class="s">.json'</span><span class="p">,</span> <span class="s">'w'</span><span class="p">)</span> <span class="k">as</span> <span class="n">j</span><span class="p">:</span> <span class="c1"># Create json log file of scraped info
</span>          <span class="n">json</span><span class="p">.</span><span class="n">dump</span><span class="p">(</span><span class="n">recipeJson</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span>

        <span class="n">rawImg</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">mainImage</span><span class="p">).</span><span class="n">content</span> <span class="c1"># Dirty get/dl img jpg without using builtin scrapy pipelines...
</span>        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">nestedFolder</span><span class="si">}{</span><span class="n">filename</span><span class="si">}</span><span class="s">.jpg'</span><span class="p">,</span> <span class="s">'wb'</span><span class="p">)</span> <span class="k">as</span> <span class="n">i</span><span class="p">:</span> 
          <span class="n">i</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">rawImg</span><span class="p">)</span> <span class="c1"># ..this nix's excessive scrapy files and reqs only one scipt
</span>        <span class="c1">#Especially since using htmltopdf to avoid [intentionally] atrocious html code inside main recipe table 
</span>        <span class="n">pdfkit</span><span class="p">.</span><span class="n">from_url</span><span class="p">(</span><span class="n">recipeCardUrl</span><span class="p">,</span> <span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">nestedFolder</span><span class="si">}{</span><span class="n">filename</span><span class="si">}</span><span class="s">.pdf'</span><span class="p">,</span> <span class="n">configuration</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">config</span><span class="p">)</span>
    <span class="k">except</span><span class="p">:</span>
      <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="sa">f</span><span class="s">'.</span><span class="se">\\</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">outputFolder</span><span class="si">}</span><span class="se">\\</span><span class="s">errors.txt'</span><span class="p">,</span> <span class="s">'w+'</span><span class="p">)</span> <span class="k">as</span> <span class="n">w</span><span class="p">:</span>
        <span class="n">w</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s">, </span><span class="si">{</span><span class="n">mainImage</span><span class="si">}</span><span class="s">, </span><span class="si">{</span><span class="n">category</span><span class="si">}</span><span class="s">, </span><span class="si">{</span><span class="n">recipeCardUrl</span><span class="si">}</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
  
    <span class="n">time</span><span class="p">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
  <span class="n">process</span> <span class="o">=</span> <span class="n">CrawlerProcess</span><span class="p">()</span>
  <span class="n">process</span><span class="p">.</span><span class="n">crawl</span><span class="p">(</span><span class="n">sallySpider</span><span class="p">)</span>
  <span class="n">process</span><span class="p">.</span><span class="n">start</span><span class="p">()</span>
</code></pre></div></div>]]></content><author><name>{&quot;name&quot;=&gt;nil, &quot;picture&quot;=&gt;nil, &quot;email&quot;=&gt;nil, &quot;twitter&quot;=&gt;nil, &quot;links&quot;=&gt;[{&quot;title&quot;=&gt;nil, &quot;url&quot;=&gt;nil, &quot;icon&quot;=&gt;nil}]}</name></author><category term="Webscraping" /><category term="Python" /><category term="Scrapy" /><category term="Automation" /><summary type="html"><![CDATA[Another recipe scraper! Killed ~5103 ads Added 500+ recipes to my collection Same format as usual for scraping recipes Get links corresponding to each food category Get total amount of pages for each category Get header, picture, pdf, etc.. of each recipes occuring on each page]]></summary></entry><entry><title type="html">Dummies for a dummy.</title><link href="https://onthefritzz.com/dummys/" rel="alternate" type="text/html" title="Dummies for a dummy." /><published>2023-03-18T00:00:00-05:00</published><updated>2023-03-18T00:00:00-05:00</updated><id>https://onthefritzz.com/dummys</id><content type="html" xml:base="https://onthefritzz.com/dummys/"><![CDATA[<p><img src="/images/vga-dummy-exploded.jpg" class="align-center" alt="" /></p>

<p>Overview: HP’s are trash imo. HP’s excel at being ever so slightly annoying, even when nothing is wrong and <strong>especially</strong> when something needs to be fixed. Nothing ever seems to go ‘smoothly’ in a repair and they always have weird quirks. Not enough to convince people not to purchase them but more than enough for an experienced tech to know what to expect when HP’s are involved.</p>

<p>Issue: HP boots to BIOS fine but has no video output if a display is not connected <strong>prior</strong> to powering on.</p>

<p>Why: HP’s seem to be the only Desktop brand that has models where the display driver isn’t loaded with BIOS, unless it physically detects a connected monitor. This is an issue when I can boot/test 10+ Dells at once and simply connect a display adapter one at a time to perform tasks in BIOS. However, when I perform the same task on some HP models, the unit clearly fires up and boots. Although if there was not a monitor plugged in prior to the unit power on, there is no visual. In essence HP’s can either reduce testing efficiency by 90% or we can create some VGA dummies. This is done by pulling select pins to ground with a resitor, a monitor is connected through simulation. Plug in or remove monitors to your hearts content without losing visuals. Here’s a diagram of what worked. Any <strong>50-150ohm</strong> resistor will work.</p>

<p><img src="/images/vga-dummy-schematic.jpg" class="align-center" alt="" /></p>

<p>(Source: https://www.geeks3d.com/20091230/vga-hack-how-to-make-a-vga-dummy-plug/)</p>

<p>Pay attention to the numbered pinout <strong>not</strong> the shape. The diagram above is for a <strong>female</strong> vga. I required the <strong>male</strong> connection which more or less inverted the diagram. Pro tip: Most, if not all, VGA cords actually have tiny numbers inside the shielding which correspond correctly to the numbers in the diagram. So to reiterate, base soldering on the numbers not the shape.</p>

<p><img src="/images/vga-ducks-in-a-row.jpg" class="align-center" alt="" /></p>]]></content><author><name>{&quot;name&quot;=&gt;nil, &quot;picture&quot;=&gt;nil, &quot;email&quot;=&gt;nil, &quot;twitter&quot;=&gt;nil, &quot;links&quot;=&gt;[{&quot;title&quot;=&gt;nil, &quot;url&quot;=&gt;nil, &quot;icon&quot;=&gt;nil}]}</name></author><category term="Hardware" /><category term="Soldering" /><summary type="html"><![CDATA[]]></summary></entry></feed>